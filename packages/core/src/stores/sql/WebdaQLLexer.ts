// Generated from src/stores/sql/WebdaQLLexer.g4 by ANTLR 4.9.0-SNAPSHOT

import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";

export class WebdaQLLexer extends Lexer {
  public static readonly SPACE = 1;
  public static readonly LR_BRACKET = 2;
  public static readonly RR_BRACKET = 3;
  public static readonly COMMA = 4;
  public static readonly SINGLE_QUOTE_SYMB = 5;
  public static readonly DOUBLE_QUOTE_SYMB = 6;
  public static readonly LR_SQ_BRACKET = 7;
  public static readonly RR_SQ_BRACKET = 8;
  public static readonly AND = 9;
  public static readonly OR = 10;
  public static readonly EQUAL = 11;
  public static readonly NOT_EQUAL = 12;
  public static readonly GREATER = 13;
  public static readonly GREATER_OR_EQUAL = 14;
  public static readonly LESS = 15;
  public static readonly LESS_OR_EQUAL = 16;
  public static readonly LIKE = 17;
  public static readonly IN = 18;
  public static readonly TRUE = 19;
  public static readonly FALSE = 20;
  public static readonly LIMIT = 21;
  public static readonly OFFSET = 22;
  public static readonly DQUOTED_STRING_LITERAL = 23;
  public static readonly SQUOTED_STRING_LITERAL = 24;
  public static readonly INTEGER_LITERAL = 25;
  public static readonly IDENTIFIER = 26;
  public static readonly IDENTIFIER_WITH_NUMBER = 27;
  public static readonly FUNCTION_IDENTIFIER_WITH_UNDERSCORE = 28;

  // tslint:disable:no-trailing-whitespace
  public static readonly channelNames: string[] = ["DEFAULT_TOKEN_CHANNEL", "HIDDEN"];

  // tslint:disable:no-trailing-whitespace
  public static readonly modeNames: string[] = ["DEFAULT_MODE"];

  public static readonly ruleNames: string[] = [
    "SPACE",
    "ID_LITERAL",
    "DQUOTA_STRING",
    "SQUOTA_STRING",
    "INT_DIGIT",
    "FN_LITERAL",
    "LR_BRACKET",
    "RR_BRACKET",
    "COMMA",
    "SINGLE_QUOTE_SYMB",
    "DOUBLE_QUOTE_SYMB",
    "LR_SQ_BRACKET",
    "RR_SQ_BRACKET",
    "QUOTE_SYMB",
    "AND",
    "OR",
    "EQUAL",
    "NOT_EQUAL",
    "GREATER",
    "GREATER_OR_EQUAL",
    "LESS",
    "LESS_OR_EQUAL",
    "LIKE",
    "IN",
    "TRUE",
    "FALSE",
    "LIMIT",
    "OFFSET",
    "DQUOTED_STRING_LITERAL",
    "SQUOTED_STRING_LITERAL",
    "INTEGER_LITERAL",
    "IDENTIFIER",
    "IDENTIFIER_WITH_NUMBER",
    "FUNCTION_IDENTIFIER_WITH_UNDERSCORE"
  ];

  private static readonly _LITERAL_NAMES: Array<string | undefined> = [
    undefined,
    undefined,
    "'('",
    "')'",
    "','",
    "'''",
    "'\"'",
    "'['",
    "']'",
    "'AND'",
    "'OR'",
    "'='",
    "'!='",
    "'>'",
    "'>='",
    "'<'",
    "'<='",
    "'LIKE'",
    "'IN'",
    "'TRUE'",
    "'FALSE'",
    "'LIMIT'",
    "'OFFSET'"
  ];
  private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
    undefined,
    "SPACE",
    "LR_BRACKET",
    "RR_BRACKET",
    "COMMA",
    "SINGLE_QUOTE_SYMB",
    "DOUBLE_QUOTE_SYMB",
    "LR_SQ_BRACKET",
    "RR_SQ_BRACKET",
    "AND",
    "OR",
    "EQUAL",
    "NOT_EQUAL",
    "GREATER",
    "GREATER_OR_EQUAL",
    "LESS",
    "LESS_OR_EQUAL",
    "LIKE",
    "IN",
    "TRUE",
    "FALSE",
    "LIMIT",
    "OFFSET",
    "DQUOTED_STRING_LITERAL",
    "SQUOTED_STRING_LITERAL",
    "INTEGER_LITERAL",
    "IDENTIFIER",
    "IDENTIFIER_WITH_NUMBER",
    "FUNCTION_IDENTIFIER_WITH_UNDERSCORE"
  ];
  public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(
    WebdaQLLexer._LITERAL_NAMES,
    WebdaQLLexer._SYMBOLIC_NAMES,
    []
  );

  // @Override
  // @NotNull
  public get vocabulary(): Vocabulary {
    return WebdaQLLexer.VOCABULARY;
  }
  // tslint:enable:no-trailing-whitespace

  constructor(input: CharStream) {
    super(input);
    this._interp = new LexerATNSimulator(WebdaQLLexer._ATN, this);
  }

  // @Override
  public get grammarFileName(): string {
    return "WebdaQLLexer.g4";
  }

  // @Override
  public get ruleNames(): string[] {
    return WebdaQLLexer.ruleNames;
  }

  // @Override
  public get serializedATN(): string {
    return WebdaQLLexer._serializedATN;
  }

  // @Override
  public get channelNames(): string[] {
    return WebdaQLLexer.channelNames;
  }

  // @Override
  public get modeNames(): string[] {
    return WebdaQLLexer.modeNames;
  }

  public static readonly _serializedATN: string =
    "\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x1E\xD8\b\x01" +
    "\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
    "\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
    "\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
    "\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t" +
    "\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t" +
    '\x1C\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04"\t' +
    '"\x04#\t#\x03\x02\x06\x02I\n\x02\r\x02\x0E\x02J\x03\x02\x03\x02\x03\x03' +
    "\x06\x03P\n\x03\r\x03\x0E\x03Q\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04" +
    "\x03\x04\x07\x04Z\n\x04\f\x04\x0E\x04]\v\x04\x03\x04\x03\x04\x03\x05\x03" +
    "\x05\x03\x05\x03\x05\x03\x05\x03\x05\x07\x05g\n\x05\f\x05\x0E\x05j\v\x05" +
    "\x03\x05\x03\x05\x03\x06\x03\x06\x03\x07\x03\x07\x07\x07r\n\x07\f\x07" +
    "\x0E\x07u\v\x07\x03\b\x03\b\x03\t\x03\t\x03\n\x03\n\x03\v\x03\v\x03\f" +
    "\x03\f\x03\r\x03\r\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x05\x0F\x87\n\x0F\x03" +
    "\x10\x03\x10\x03\x10\x03\x10\x03\x11\x03\x11\x03\x11\x03\x12\x03\x12\x03" +
    "\x13\x03\x13\x03\x13\x03\x14\x03\x14\x03\x15\x03\x15\x03\x15\x03\x16\x03" +
    "\x16\x03\x17\x03\x17\x03\x17\x03\x18\x03\x18\x03\x18\x03\x18\x03\x18\x03" +
    "\x19\x03\x19\x03\x19\x03\x1A\x03\x1A\x03\x1A\x03\x1A\x03\x1A\x03\x1B\x03" +
    "\x1B\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x03\x1C\x03\x1C\x03\x1C\x03\x1C\x03" +
    "\x1C\x03\x1C\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03" +
    "\x1E\x03\x1E\x03\x1F\x03\x1F\x03 \x06 \xC4\n \r \x0E \xC5\x03!\x06!\xC9" +
    '\n!\r!\x0E!\xCA\x03"\x06"\xCE\n"\r"\x0E"\xCF\x03#\x03#\x07#\xD4\n' +
    "#\f#\x0E#\xD7\v#\x02\x02\x02$\x03\x02\x03\x05\x02\x02\x07\x02\x02\t\x02" +
    "\x02\v\x02\x02\r\x02\x02\x0F\x02\x04\x11\x02\x05\x13\x02\x06\x15\x02\x07" +
    "\x17\x02\b\x19\x02\t\x1B\x02\n\x1D\x02\x02\x1F\x02\v!\x02\f#\x02\r%\x02" +
    "\x0E'\x02\x0F)\x02\x10+\x02\x11-\x02\x12/\x02\x131\x02\x143\x02\x155" +
    "\x02\x167\x02\x179\x02\x18;\x02\x19=\x02\x1A?\x02\x1BA\x02\x1CC\x02\x1D" +
    'E\x02\x1E\x03\x02\v\x05\x02\v\f\x0F\x0F""\x05\x022;C\\c|\x04\x02$$^' +
    "^\x04\x02))^^\x03\x022;\x03\x02C\\\x04\x02C\\aa\x04\x02C\\c|\x07\x020" +
    "02;C\\aac|\x02\xDF\x02\x03\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02" +
    "\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02" +
    "\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02\x02\x02\x02" +
    "\x1F\x03\x02\x02\x02\x02!\x03\x02\x02\x02\x02#\x03\x02\x02\x02\x02%\x03" +
    "\x02\x02\x02\x02'\x03\x02\x02\x02\x02)\x03\x02\x02\x02\x02+\x03\x02\x02" +
    "\x02\x02-\x03\x02\x02\x02\x02/\x03\x02\x02\x02\x021\x03\x02\x02\x02\x02" +
    "3\x03\x02\x02\x02\x025\x03\x02\x02\x02\x027\x03\x02\x02\x02\x029\x03\x02" +
    "\x02\x02\x02;\x03\x02\x02\x02\x02=\x03\x02\x02\x02\x02?\x03\x02\x02\x02" +
    "\x02A\x03\x02\x02\x02\x02C\x03\x02\x02\x02\x02E\x03\x02\x02\x02\x03H\x03" +
    "\x02\x02\x02\x05O\x03\x02\x02\x02\x07S\x03\x02\x02\x02\t`\x03\x02\x02" +
    "\x02\vm\x03\x02\x02\x02\ro\x03\x02\x02\x02\x0Fv\x03\x02\x02\x02\x11x\x03" +
    "\x02\x02\x02\x13z\x03\x02\x02\x02\x15|\x03\x02\x02\x02\x17~\x03\x02\x02" +
    "\x02\x19\x80\x03\x02\x02\x02\x1B\x82\x03\x02\x02\x02\x1D\x86\x03\x02\x02" +
    "\x02\x1F\x88\x03\x02\x02\x02!\x8C\x03\x02\x02\x02#\x8F\x03\x02\x02\x02" +
    "%\x91\x03\x02\x02\x02'\x94\x03\x02\x02\x02)\x96\x03\x02\x02\x02+\x99" +
    "\x03\x02\x02\x02-\x9B\x03\x02\x02\x02/\x9E\x03\x02\x02\x021\xA3\x03\x02" +
    "\x02\x023\xA6\x03\x02\x02\x025\xAB\x03\x02\x02\x027\xB1\x03\x02\x02\x02" +
    "9\xB7\x03\x02\x02\x02;\xBE\x03\x02\x02\x02=\xC0\x03\x02\x02\x02?\xC3\x03" +
    "\x02\x02\x02A\xC8\x03\x02\x02\x02C\xCD\x03\x02\x02\x02E\xD1\x03\x02\x02" +
    "\x02GI\t\x02\x02\x02HG\x03\x02\x02\x02IJ\x03\x02\x02\x02JH\x03\x02\x02" +
    "\x02JK\x03\x02\x02\x02KL\x03\x02\x02\x02LM\b\x02\x02\x02M\x04\x03\x02" +
    "\x02\x02NP\t\x03\x02\x02ON\x03\x02\x02\x02PQ\x03\x02\x02\x02QO\x03\x02" +
    "\x02\x02QR\x03\x02\x02\x02R\x06\x03\x02\x02\x02S[\x07$\x02\x02TU\x07^" +
    "\x02\x02UZ\v\x02\x02\x02VW\x07$\x02\x02WZ\x07$\x02\x02XZ\n\x04\x02\x02" +
    "YT\x03\x02\x02\x02YV\x03\x02\x02\x02YX\x03\x02\x02\x02Z]\x03\x02\x02\x02" +
    "[Y\x03\x02\x02\x02[\\\x03\x02\x02\x02\\^\x03\x02\x02\x02][\x03\x02\x02" +
    "\x02^_\x07$\x02\x02_\b\x03\x02\x02\x02`h\x07)\x02\x02ab\x07^\x02\x02b" +
    "g\v\x02\x02\x02cd\x07)\x02\x02dg\x07)\x02\x02eg\n\x05\x02\x02fa\x03\x02" +
    "\x02\x02fc\x03\x02\x02\x02fe\x03\x02\x02\x02gj\x03\x02\x02\x02hf\x03\x02" +
    "\x02\x02hi\x03\x02\x02\x02ik\x03\x02\x02\x02jh\x03\x02\x02\x02kl\x07)" +
    "\x02\x02l\n\x03\x02\x02\x02mn\t\x06\x02\x02n\f\x03\x02\x02\x02os\t\x07" +
    "\x02\x02pr\t\b\x02\x02qp\x03\x02\x02\x02ru\x03\x02\x02\x02sq\x03\x02\x02" +
    "\x02st\x03\x02\x02\x02t\x0E\x03\x02\x02\x02us\x03\x02\x02\x02vw\x07*\x02" +
    "\x02w\x10\x03\x02\x02\x02xy\x07+\x02\x02y\x12\x03\x02\x02\x02z{\x07.\x02" +
    "\x02{\x14\x03\x02\x02\x02|}\x07)\x02\x02}\x16\x03\x02\x02\x02~\x7F\x07" +
    "$\x02\x02\x7F\x18\x03\x02\x02\x02\x80\x81\x07]\x02\x02\x81\x1A\x03\x02" +
    "\x02\x02\x82\x83\x07_\x02\x02\x83\x1C\x03\x02\x02\x02\x84\x87\x05\x15" +
    "\v\x02\x85\x87\x05\x17\f\x02\x86\x84\x03\x02\x02\x02\x86\x85\x03\x02\x02" +
    "\x02\x87\x1E\x03\x02\x02\x02\x88\x89\x07C\x02\x02\x89\x8A\x07P\x02\x02" +
    "\x8A\x8B\x07F\x02\x02\x8B \x03\x02\x02\x02\x8C\x8D\x07Q\x02\x02\x8D\x8E" +
    '\x07T\x02\x02\x8E"\x03\x02\x02\x02\x8F\x90\x07?\x02\x02\x90$\x03\x02' +
    "\x02\x02\x91\x92\x07#\x02\x02\x92\x93\x07?\x02\x02\x93&\x03\x02\x02\x02" +
    "\x94\x95\x07@\x02\x02\x95(\x03\x02\x02\x02\x96\x97\x07@\x02\x02\x97\x98" +
    "\x07?\x02\x02\x98*\x03\x02\x02\x02\x99\x9A\x07>\x02\x02\x9A,\x03\x02\x02" +
    "\x02\x9B\x9C\x07>\x02\x02\x9C\x9D\x07?\x02\x02\x9D.\x03\x02\x02\x02\x9E" +
    "\x9F\x07N\x02\x02\x9F\xA0\x07K\x02\x02\xA0\xA1\x07M\x02\x02\xA1\xA2\x07" +
    "G\x02\x02\xA20\x03\x02\x02\x02\xA3\xA4\x07K\x02\x02\xA4\xA5\x07P\x02\x02" +
    "\xA52\x03\x02\x02\x02\xA6\xA7\x07V\x02\x02\xA7\xA8\x07T\x02\x02\xA8\xA9" +
    "\x07W\x02\x02\xA9\xAA\x07G\x02\x02\xAA4\x03\x02\x02\x02\xAB\xAC\x07H\x02" +
    "\x02\xAC\xAD\x07C\x02\x02\xAD\xAE\x07N\x02\x02\xAE\xAF\x07U\x02\x02\xAF" +
    "\xB0\x07G\x02\x02\xB06\x03\x02\x02\x02\xB1\xB2\x07N\x02\x02\xB2\xB3\x07" +
    "K\x02\x02\xB3\xB4\x07O\x02\x02\xB4\xB5\x07K\x02\x02\xB5\xB6\x07V\x02\x02" +
    "\xB68\x03\x02\x02\x02\xB7\xB8\x07Q\x02\x02\xB8\xB9\x07H\x02\x02\xB9\xBA" +
    "\x07H\x02\x02\xBA\xBB\x07U\x02\x02\xBB\xBC\x07G\x02\x02\xBC\xBD\x07V\x02" +
    "\x02\xBD:\x03\x02\x02\x02\xBE\xBF\x05\x07\x04\x02\xBF<\x03\x02\x02\x02" +
    "\xC0\xC1\x05\t\x05\x02\xC1>\x03\x02\x02\x02\xC2\xC4\x05\v\x06\x02\xC3" +
    "\xC2\x03\x02\x02\x02\xC4\xC5\x03\x02\x02\x02\xC5\xC3\x03\x02\x02\x02\xC5" +
    "\xC6\x03\x02\x02\x02\xC6@\x03\x02\x02\x02\xC7\xC9\t\t\x02\x02\xC8\xC7" +
    "\x03\x02\x02\x02\xC9\xCA\x03\x02\x02\x02\xCA\xC8\x03\x02\x02\x02\xCA\xCB" +
    "\x03\x02\x02\x02\xCBB\x03\x02\x02\x02\xCC\xCE\t\n\x02\x02\xCD\xCC\x03" +
    "\x02\x02\x02\xCE\xCF\x03\x02\x02\x02\xCF\xCD\x03\x02\x02\x02\xCF\xD0\x03" +
    "\x02\x02\x02\xD0D\x03\x02\x02\x02\xD1\xD5\t\x07\x02\x02\xD2\xD4\t\b\x02" +
    "\x02\xD3\xD2\x03\x02\x02\x02\xD4\xD7\x03\x02\x02\x02\xD5\xD3\x03\x02\x02" +
    "\x02\xD5\xD6\x03\x02\x02\x02\xD6F\x03\x02\x02\x02\xD7\xD5\x03\x02\x02" +
    "\x02\x0F\x02JQY[fhs\x86\xC5\xCA\xCF\xD5\x03\b\x02\x02";
  public static __ATN: ATN;
  public static get _ATN(): ATN {
    if (!WebdaQLLexer.__ATN) {
      WebdaQLLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(WebdaQLLexer._serializedATN));
    }

    return WebdaQLLexer.__ATN;
  }
}
