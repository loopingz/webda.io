"use strict";(self.webpackChunk_webda_docs=self.webpackChunk_webda_docs||[]).push([[15332],{13580:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>c,toc:()=>l});var r=i(17624),t=i(4552);const o={},s="Configuration Service",c={id:"Concepts/Services/ConfigurationService",title:"Configuration Service",description:"The Configuration Service allows you to get new configuration dynamically either by watching the configuration store or by checking at regular interval.",source:"@site/pages/Concepts/Services/ConfigurationService.md",sourceDirName:"Concepts/Services",slug:"/Concepts/Services/ConfigurationService",permalink:"/docs/Concepts/Services/ConfigurationService",draft:!1,unlisted:!1,editUrl:"https://github.com/loopingz/webda.io/tree/docs/pages/Concepts/Services/ConfigurationService.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Binary",permalink:"/docs/Concepts/Services/Binary"},next:{title:"CryptoService",permalink:"/docs/Concepts/Services/CryptoService"}},a={},l=[{value:"Existing Configuration Provider",id:"existing-configuration-provider",level:2},{value:"String Encryption",id:"string-encryption",level:2},{value:"How to use",id:"how-to-use",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",mermaid:"mermaid",p:"p",pre:"pre",ul:"ul",...(0,t.M)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"configuration-service",children:"Configuration Service"}),"\n",(0,r.jsx)(n.p,{children:"The Configuration Service allows you to get new configuration dynamically either by watching the configuration store or by checking at regular interval."}),"\n",(0,r.jsx)(n.p,{children:"It will trigger only when the object changes."}),"\n",(0,r.jsxs)(n.p,{children:["If inside the object, at path ",(0,r.jsx)(n.code,{children:"webda.services"})," it will update services configuration dynamically."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",metastring:'title="local.config.json"',children:'{\n    "mycustom": "test",\n    ...\n    "webda": {\n\t\t"parameters": {\n\t\t\t"param2": "test"\n\t\t},\n        "services": \\{\n            "MyService": \\{\n                "param1": "dynamic"\n            }\n        }\n    }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"The configuration shared parameters is also available."}),"\n",(0,r.jsx)(n.p,{children:"A service cannot be changed into another type of service for security purpose.\nCreating dynamic route through the ConfigurationService is not recommended, it will be probably be block in the near future."}),"\n",(0,r.jsx)(n.p,{children:"This is the general process if the ConfigurationProvider cannot trigger"}),"\n",(0,r.jsx)(n.mermaid,{value:"sequenceDiagram\n\tparticipant C as ConfigurationService\n    participant Cp as ConfigurationProvider\n    participant W as Webda Core\n\tloop\n\tC->>Cp: Get 'sourceId' configuration\n\tC->>C: Compare current with previous\n\topt if changes\n\t\tC->>C: Process all watchers\n\t\topt if webda.services within configuration\n\t\t\tC->>W: Reinit services with new values\n\t\tend\n\tend\n\tC->>C: Wait for next interval\n\tend"}),"\n",(0,r.jsx)(n.p,{children:"This is the general process if the ConfigurationProvider can trigger, it will be on demand"}),"\n",(0,r.jsx)(n.h2,{id:"existing-configuration-provider",children:"Existing Configuration Provider"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Every {@link Store} as it is designed in the parent class"}),"\n",(0,r.jsx)(n.li,{children:"{@link FileConfiguration} to simply use a file as configuration"}),"\n",(0,r.jsx)(n.li,{children:"{@link KubernetesConfiguration} to simply use Kubernetes Secrets or ConfigMap"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"string-encryption",children:"String Encryption"}),"\n",(0,r.jsxs)(n.p,{children:["Configuration file can be encrypted using the ",(0,r.jsx)(n.code,{children:"encrypt"})," command."]}),"\n",(0,r.jsx)(n.p,{children:"Several modes are available:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"gcp"}),": encrypted using a GCP KMS key (@webda/gcp required)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"local"}),": encrypted using local machine id"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"password"}),": encrypted using a password (@webda/runtime required)"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"how-to-use",children:"How to use"}),"\n",(0,r.jsx)(n.p,{children:"Prefix the string you want to encrypt with the mode you want to use."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",metastring:'title="config.json"',children:'{\n\t"mysecret": "encrypt:gcp:mysecret"\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"Then run the command"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"webda config-encrypt config.json\n"})}),"\n",(0,r.jsx)(n.p,{children:"If you need to migrate you can use, it will reencrypt all the encrypted strings with the new mode"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"webda config-encrypt --migrate gcp config.json\n"})}),"\n",(0,r.jsxs)(n.p,{children:["To define default KMS key for GCP use ",(0,r.jsx)(n.code,{children:"WEBDA_GCP_KMS_KEY=projects/myproject/locations/us-central-1/keyRings/mykeyring/cryptoKeys/mykey"})," environment variable."]})]})}function u(e={}){const{wrapper:n}={...(0,t.M)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},4552:(e,n,i)=>{i.d(n,{I:()=>c,M:()=>s});var r=i(11504);const t={},o=r.createContext(t);function s(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);