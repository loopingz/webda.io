"use strict";(self.webpackChunk_webda_docs=self.webpackChunk_webda_docs||[]).push([[43792],{61016:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>s,metadata:()=>a,toc:()=>c});var o=t(17624),i=t(4552);const s={sidebar_position:4},r="Stores",a={id:"Concepts/Stores/Stores",title:"Stores",description:"The store services allow you to store object in a NoSQL database it handles for you mapping between objects. Objects are mapped to a model to allow security policy and schema verification.",source:"@site/pages/Concepts/Stores/Stores.md",sourceDirName:"Concepts/Stores",slug:"/Concepts/Stores/",permalink:"/docs/Concepts/Stores/",draft:!1,unlisted:!1,editUrl:"https://github.com/loopingz/webda.io/tree/docs/pages/Concepts/Stores/Stores.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"sidebar",previous:{title:"Role Acl Model",permalink:"/docs/Concepts/Models/RoleAclModel"},next:{title:"WebdaQL",permalink:"/docs/Concepts/Stores/WebdaQL"}},l={},c=[{value:"Expose REST API",id:"expose-rest-api",level:2},{value:"Configuring Mapping",id:"configuring-mapping",level:2},{value:"Events",id:"events",level:2},{value:"Owner Policy",id:"owner-policy",level:3},{value:"Void policy",id:"void-policy",level:3},{value:"Validation",id:"validation",level:2},{value:"DynamoDB configuration",id:"dynamodb-configuration",level:2},{value:"MongoDB configuration",id:"mongodb-configuration",level:2},{value:"FileDB configuration",id:"filedb-configuration",level:2},{value:"Model Actions",id:"model-actions",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.M)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"stores",children:"Stores"}),"\n",(0,o.jsx)(n.p,{children:"The store services allow you to store object in a NoSQL database it handles for you mapping between objects. Objects are mapped to a model to allow security policy and schema verification."}),"\n",(0,o.jsx)(n.p,{children:"We have currently File, DynamoDB and MongoDB storage"}),"\n",(0,o.jsx)(n.admonition,{type:"warning",children:(0,o.jsxs)(n.p,{children:["If you run several instances of your application, you should have a pub/sub to notify the other instances of the changes or disable cache by setting ",(0,o.jsx)(n.code,{children:"disableCache"})," to ",(0,o.jsx)(n.code,{children:"true"})]})}),"\n",(0,o.jsx)(n.h2,{id:"expose-rest-api",children:"Expose REST API"}),"\n",(0,o.jsx)(n.p,{children:"Inside the configuration you can add a block for expose the store as a REST API"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",metastring:'title="webda.config.json"',children:'{\n  ...\n  "expose": {\n     "url": "/storeurl", // By default the URL is the store name in lower case\n     "restrict": {\n       "update": true, // Prevent the creation of an object the PUT method wont be exposed\n       "delete": false // Allow delete for the object\n     }\n  }\n  ...\n}\n'})}),"\n",(0,o.jsx)(n.p,{children:"The above configuration will end up creating the following routes:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"POST /storeurl"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"GET /storeurl/{uuid}"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"DELETE /storeurl/{uuid}"})}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"You can see that by default, once the store exposed all the methods are available unless you restrict them."}),"\n",(0,o.jsx)(n.h2,{id:"configuring-mapping",children:"Configuring Mapping"}),"\n",(0,o.jsx)(n.p,{children:"As an example we will use the Users / Idents stores used by the Authentication module."}),"\n",(0,o.jsx)(n.p,{children:"A User has several Idents so in NoSQL we need to deduplicate a part of the Ident object inside an array inside the User object"}),"\n",(0,o.jsx)(n.p,{children:"The following is the Idents store configuration"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",metastring:'title="webda.config.json"',children:'{\n  ...\n  "map": {\n     "Users": { // Target store\n        "key": "user", // Property inside Ident Object\n        "target": "idents", // Property on the User Object\n        "fields": "type", // Fields from the Ident Object ( uuid is added by default )\n        "cascade": true // If User object is delete then delete all the linked Idents\n     }\n  }\n'})}),"\n",(0,o.jsx)(n.p,{children:"So if you have a user like"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:'{\n  ...\n  "uuid": "user_01"\n}\n'})}),"\n",(0,o.jsx)(n.p,{children:"Then you save a new Ident object like"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:'{\n  ...\n  "uuid": "ident_01",\n  "user": "user_01",\n  "type": "Google"\n}\n'})}),"\n",(0,o.jsx)(n.p,{children:"Once the Ident saved, the User object will look like"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:'{\n  ...\n  "uuid": "user_01",\n  "idents": [{"uuid":"ident_01","type":"Google"}]\n  ...\n}\n'})}),"\n",(0,o.jsx)(n.p,{children:"Then if you update the field type on your Ident object the User object will reflect the change, as well as if you delete the ident object it will be removed from the User object."}),"\n",(0,o.jsx)(n.p,{children:"If cascade = true, then if you delete the User object, all attached Idents will be delete aswell."}),"\n",(0,o.jsx)(n.h2,{id:"events",children:"Events"}),"\n",(0,o.jsx)(n.p,{children:"The Stores emit events to let you implement some auto completion of the object if needed or taking any others action even deny the action by throwing an exception"}),"\n",(0,o.jsx)(n.p,{children:"The store event looks like"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"{\n  'object': object,\n  'store': this\n}\n"})}),"\n",(0,o.jsx)(n.p,{children:"Store.Save: Before saving the object\nStore.Saved: After saving the object\nStore.Update: Before updating the object\nStore.Updated: After updating the object\nStore.Delete: Before deleting the object\nStore.Deleted: After deleting the object\nStore.Get: When getting the object"}),"\n",(0,o.jsx)(n.h3,{id:"owner-policy",children:"Owner Policy"}),"\n",(0,o.jsx)(n.p,{children:"POST: Add the current user in the user field of the object\nPUT: Verify the current user is the user inside the user field\nGET: Verify the current user is the user inside the user field, or a public=true field exists on the object\nDELETE: Verify the current user is the user inside the user field"}),"\n",(0,o.jsx)(n.h3,{id:"void-policy",children:"Void policy"}),"\n",(0,o.jsx)(n.p,{children:"No verification, not recommended at all"}),"\n",(0,o.jsx)(n.h2,{id:"validation",children:"Validation"}),"\n",(0,o.jsx)(n.p,{children:"To ensure that the input is correct, you can setup a JSON schema this way any update or creation will verify that the object is correct."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:'{\n  ...\n  "validator": "schema"\n  ...\n}\n'})}),"\n",(0,o.jsx)(n.p,{children:"All the input of POST or PUT will then be validate against it."}),"\n",(0,o.jsx)(n.h2,{id:"dynamodb-configuration",children:"DynamoDB configuration"}),"\n",(0,o.jsx)(n.p,{children:"The DynamoDB stores requires at least accessKeyId, secretAccessKey and table"}),"\n",(0,o.jsxs)(n.p,{children:["For more information on DynamoDB : ",(0,o.jsx)(n.a,{href:"https://aws.amazon.com/dynamodb/",children:"AWS DynamoDB"})]}),"\n",(0,o.jsx)(n.h2,{id:"mongodb-configuration",children:"MongoDB configuration"}),"\n",(0,o.jsx)(n.p,{children:"The MongoDB configuration requires a collection and a mongo parameter where mongo is the MongoDB url"}),"\n",(0,o.jsx)(n.h2,{id:"filedb-configuration",children:"FileDB configuration"}),"\n",(0,o.jsx)(n.p,{children:"The FileDB only requires a folder where to store the datas. It creates it if not exists"}),"\n",(0,o.jsx)(n.h2,{id:"model-actions",children:"Model Actions"}),"\n",(0,o.jsx)(n.p,{children:"When defining a model for a store, you can define action on the model, it will be by default a new endpoint"}),"\n",(0,o.jsx)(n.p,{children:"For non-global action, they apply to an object"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"/store/{uuid}/{actionName}\n"})}),"\n",(0,o.jsx)(n.p,{children:"If the action is global"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"/store/{actionName}\n"})})]})}function h(e={}){const{wrapper:n}={...(0,i.M)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},4552:(e,n,t)=>{t.d(n,{I:()=>a,M:()=>r});var o=t(11504);const i={},s=o.createContext(i);function r(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);