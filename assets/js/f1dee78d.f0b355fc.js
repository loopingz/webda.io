"use strict";(self.webpackChunk_webda_docs=self.webpackChunk_webda_docs||[]).push([[43672],{53876:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>i,default:()=>l,frontMatter:()=>a,metadata:()=>s,toc:()=>d});var r=t(17624),o=t(4552);const a={},i="Async Actions",s={id:"Modules/async/AsyncActions",title:"Async Actions",description:"This module allows you to execute background tasks (called AsyncAction).",source:"@site/pages/Modules/async/AsyncActions.md",sourceDirName:"Modules/async",slug:"/Modules/async/AsyncActions",permalink:"/docs/Modules/async/AsyncActions",draft:!1,unlisted:!1,editUrl:"https://github.com/loopingz/webda.io/tree/docs/pages/Modules/async/AsyncActions.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"@webda/async",permalink:"/docs/Modules/async/"},next:{title:"@webda/aws",permalink:"/docs/Modules/aws/"}},c={},d=[{value:"Architecture",id:"architecture",level:2},{value:"Runner",id:"runner",level:2},{value:"LocalRunner",id:"localrunner",level:3},{value:"ServiceRunner",id:"servicerunner",level:3},{value:"KubeRunner",id:"kuberunner",level:3},{value:"Job",id:"job",level:2},{value:"Webda",id:"webda",level:3},{value:"Python",id:"python",level:3}];function u(n){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",mermaid:"mermaid",p:"p",pre:"pre",...(0,o.M)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h1,{id:"async-actions",children:"Async Actions"}),"\n",(0,r.jsx)(e.p,{children:"This module allows you to execute background tasks (called AsyncAction).\nAn AsyncAction can run as a child process (LocalRunner), a promise (ServiceRunner) or a kubernetes job (KubeRunner of @webda/kubernetes module)."}),"\n",(0,r.jsx)(e.p,{children:"Using child process or kubernetes job allows you to use other languages to implement your AsyncAction."}),"\n",(0,r.jsx)(e.p,{children:"When promise is used, you need to implement in Typescript of course."}),"\n",(0,r.jsx)(e.p,{children:"The AsyncJobService will store the information in a Store, launch the AsyncAction passing it the JobInfo that allows the action to update its status."}),"\n",(0,r.jsx)(e.p,{children:"The AsyncJobService also allow you to schedule the AsyncAction."}),"\n",(0,r.jsx)(e.p,{children:"Currently to use Cron with something else than an AsyncOperationAction, you need to create an AsyncOperationAction that will then launch the real AsyncAction."}),"\n",(0,r.jsx)(e.h2,{id:"architecture",children:"Architecture"}),"\n",(0,r.jsx)(e.p,{children:"Flow with a Queue"}),"\n",(0,r.jsx)(e.mermaid,{value:"sequenceDiagram\n\tparticipant Q as Queue\n    participant Aa as AsyncActionService API\n    participant S as Store\n    participant Ar as AsyncActionService Worker\n\tparticipant R as Runner\n\tparticipant J as Job\n    Aa->>S: Create new action in 'QUEUED' status\n\tAa->>Q: Queue action\n    Q->>Ar: Retrieve Queue item\n\tactivate Ar\n\tAr->>S: Move action to 'STARTING' status\n\tAr->>R: Run action\n\tR->>J: Launch Job\n\tR->>Ar: Return Runner Job Info\n\tAr->>S: Save Runner Job Info\n\tdeactivate Ar\n\tloop status report\n\t\tJ->>Aa: Use hook /async/status to report\n\t\tactivate Aa\n\t\tAa->>S: Update status from report\n\t\tdeactivate Aa\n\tend"}),"\n",(0,r.jsx)(e.p,{children:"Flow with local run and http hook status"}),"\n",(0,r.jsx)(e.mermaid,{value:"sequenceDiagram\n    participant S as Store\n    participant Ar as AsyncActionService Worker\n\tparticipant R as Runner\n\tparticipant J as Job\n    Ar->>S: Create new action in 'QUEUED' status\n\tactivate Ar\n\tAr->>S: Move action to 'STARTING' status\n\tAr->>R: Run action\n\tR->>J: Launch Job\n\tR->>Ar: Return Runner Job Info\n\tAr->>S: Save Runner Job Info\n\tdeactivate Ar\n\tloop status report\n\t\tJ->>Ar: Use hook /async/status to report\n\t\tactivate Ar\n\t\tAr->>S: Update status from report\n\t\tdeactivate Ar\n\tend"}),"\n",(0,r.jsx)(e.p,{children:"Flow with local run with WebdaAction only"}),"\n",(0,r.jsx)(e.mermaid,{value:"sequenceDiagram\n    participant S as Store\n    participant Ar as AsyncActionService Worker\n\tparticipant R as Runner\n\tparticipant J as Job\n    Ar->>S: Create new action in 'QUEUED' status\n\tactivate Ar\n\tAr->>S: Move action to 'STARTING' status\n\tAr->>R: Run action\n\tR->>J: Launch Job\n\tR->>Ar: Return Runner Job Info\n\tAr->>S: Save Runner Job Info\n\tdeactivate Ar\n\tloop status report\n\t\tJ->>S: Update status direclty in Store\n\tend"}),"\n",(0,r.jsx)(e.h2,{id:"runner",children:"Runner"}),"\n",(0,r.jsxs)(e.p,{children:["The runner is the service responsible to launch the action effectively.\nIt can pick which action it can handle by implementing the method ",(0,r.jsx)(e.code,{children:"handleType"})]}),"\n",(0,r.jsx)(e.p,{children:"This way you can decide to execute your Python Action with a KubernetesJob configuration and the other with another configuration or a child_process."}),"\n",(0,r.jsx)(e.h3,{id:"localrunner",children:"LocalRunner"}),"\n",(0,r.jsxs)(e.p,{children:["This runner execute a process locally by using the ",(0,r.jsx)(e.code,{children:"child_process"})]}),"\n",(0,r.jsx)(e.h3,{id:"servicerunner",children:"ServiceRunner"}),"\n",(0,r.jsx)(e.p,{children:"This runner execute only another service method within the same NodeJS process\nIt can only be used with AsyncOperationAction"}),"\n",(0,r.jsx)(e.h3,{id:"kuberunner",children:"KubeRunner"}),"\n",(0,r.jsx)(e.p,{children:"This runner launch a Job in a Kubernetes"}),"\n",(0,r.jsx)(e.h2,{id:"job",children:"Job"}),"\n",(0,r.jsx)(e.h3,{id:"webda",children:"Webda"}),"\n",(0,r.jsx)(e.p,{children:"You can define a Kubernetes Job configuration that run your webda image"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"webda launch AsyncService runAsyncOperationAction\n"})}),"\n",(0,r.jsx)(e.p,{children:"Where AsyncService is the name of your AsyncService instance.\nIt will pick up automatically the job info from the environment variables, run the target operation and post its status"}),"\n",(0,r.jsx)(e.h3,{id:"python",children:"Python"}),"\n",(0,r.jsx)(e.p,{children:"You can interact with the AsyncJobService API with this primitives."}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",metastring:'title="job.py"',children:'\ndef check_job():\n    if (\n        environ.get("JOB_ID") is None\n        or environ.get("JOB_SECRET_KEY") is None\n        or environ.get("JOB_HOOK") is None\n    ):\n        raise Exception("JOB_ID, JOB_SECRET_KEY and JOB_HOOK are required")\n\n\ndef job_headers():\n    ts = str(round(time.time() * 1000))\n    return {\n        "X-Job-Id": environ.get("JOB_ID"),\n        "X-Job-Time": ts,\n        "X-Job-Hash": hmac.new(\n            bytes(environ.get("JOB_SECRET_KEY"), "latin-1"),\n            msg=bytes(ts, "latin-1"),\n            digestmod=hashlib.sha256,\n        )\n        .hexdigest()\n        .lower(),\n    }\n\n\ndef send_status(data=None):\n    """\n    Send Job Status\n    """\n    ts = str(round(time.time() * 1000))\n    # https://docs.python.org/3/library/http.client.html\n    r = requests.post(\n        environ.get("JOB_HOOK") + "/status", json=data, headers=job_headers()\n    )\n    return r.json()\n\n\ndef download_from(\n    store: string, uuid: string, property: string, index: int, dirpath: string\n):\n    """\n    Download a file related to the Job\n    """\n    # Get the download link from the service\n    r = requests.get(\n        "{hook}/download/{store}/{uuid}/{property}/{index}".format(\n            hook=environ.get("JOB_HOOK"),\n            store=store,\n            uuid=uuid,\n            property=property,\n            index=index,\n        ),\n        headers=job_headers(),\n    )\n    if r.status_code != 200:\n        raise Exception("Cannot download")\n    res = r.json()\n    filename = path.join(dirpath, res["Map"]["hash"])\n    if path.exists(filename):\n        print("Already downloaded")\n        return\n    dwl = requests.get(res["Location"])\n    if r.status_code != 200:\n        raise Exception("Cannot download from redirect")\n    with open(path.join(dirpath, res["Map"]["hash"]), "wb") as f:\n        f.write(dwl.content)\n    return filename\n\n\ndef upload_to(\n    store: string, uuid: string, property: string, filepath: string, metadata={}\n):\n    """\n    Upload a file related to the Job\n    """\n    file_hash = hashlib.md5()\n    challenge = hashlib.md5()\n    challenge.update("WEBDA".encode())\n    with open(filepath, "rb") as f:\n        while chunk := f.read(8192):\n            file_hash.update(chunk)\n            challenge.update(chunk)\n    # Get the upload link from the service\n    r = requests.put(\n        "{hook}/upload/{store}/{uuid}/{property}".format(\n            hook=environ.get("JOB_HOOK"),\n            store=store,\n            uuid=uuid,\n            property=property,\n        ),\n        json={\n            "hash": file_hash.hexdigest(),\n            "challenge": challenge.hexdigest(),\n            "metadata": metadata,\n        },\n        headers=job_headers(),\n    )\n    if r.status_code != 200:\n        raise Exception("Upload failed")\n    res = r.json()\n    # If file is already known to the system\n    if res["done"]:\n        print("Already uploaded")\n        return\n    with open(filepath, "rb") as f:\n        res = requests.request(res["method"], res["url"], data=f)\n        if res.status_code >= 300:\n            raise Exception("Upload failed")\n\n'})})]})}function l(n={}){const{wrapper:e}={...(0,o.M)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(u,{...n})}):u(n)}},4552:(n,e,t)=>{t.d(e,{I:()=>s,M:()=>i});var r=t(11504);const o={},a=r.createContext(o);function i(n){const e=r.useContext(a);return r.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function s(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:i(n.components),r.createElement(a.Provider,{value:e},n.children)}}}]);