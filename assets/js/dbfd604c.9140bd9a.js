"use strict";(self.webpackChunk_webda_docs=self.webpackChunk_webda_docs||[]).push([[66079],{97964:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>l});var o=t(17624),i=t(4552);const s={sidebar_position:3},a="Models",r={id:"Concepts/Models/Models",title:"Models",description:"The models define your business objects.",source:"@site/pages/Concepts/Models/Models.md",sourceDirName:"Concepts/Models",slug:"/Concepts/Models/",permalink:"/docs/Concepts/Models/",draft:!1,unlisted:!1,editUrl:"https://github.com/loopingz/webda.io/tree/docs/pages/Concepts/Models/Models.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"sidebar",previous:{title:"Registry",permalink:"/docs/Concepts/Services/Registry"},next:{title:"Acl Model",permalink:"/docs/Concepts/Models/AclModel"}},d={},l=[{value:"Attributes",id:"attributes",level:2},{value:"Actions",id:"actions",level:2},{value:"Model schemas",id:"model-schemas",level:2},{value:"JSDocs Annotation",id:"jsdocs-annotation",level:3},{value:"Relations",id:"relations",level:2},{value:"Mapper",id:"mapper",level:3},{value:"Domain service",id:"domain-service",level:3}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,i.M)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"models",children:"Models"}),"\n",(0,o.jsx)(n.p,{children:"The models define your business objects.\nThey are stored and exposed through API by Stores."}),"\n",(0,o.jsxs)(n.p,{children:["They are close to a ",(0,o.jsx)(n.code,{children:"POJO"})," but when attached to a Store, they are not truely POJO, similar to Hibernate."]}),"\n",(0,o.jsxs)(n.p,{children:["Their schema is build with the ",(0,o.jsx)(n.code,{children:"webda build"})," command."]}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"toJSON"})," method filters the attached store and context."]}),"\n",(0,o.jsx)(n.h2,{id:"attributes",children:"Attributes"}),"\n",(0,o.jsxs)(n.p,{children:["Every attribute starting with a ",(0,o.jsx)(n.code,{children:"_"})," is not modifiable by the HTTP APIs.\nIf an attribte starts with a double underscore ",(0,o.jsx)(n.code,{children:"__"}),", the attribute will be strip from any HTTP output, this is useful to store\npasswords or others server-only attributes."]}),"\n",(0,o.jsx)(n.p,{children:"Another type of readonly attributes is the defined maps."}),"\n",(0,o.jsx)(n.h2,{id:"actions",children:"Actions"}),"\n",(0,o.jsxs)(n.p,{children:["By default if exposed via a ",(0,o.jsx)(n.code,{children:"Store"})," the endpoint to manipulate models are following REST API"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"GET /models/{uuid}       - Retrieve a model\nPOST /models             - Create a new model\nDELETE /models/{uuid}    - Delete a model\nPUT /models/{uuid}       - Update a model\nPATCH /models/{uuid}     - Patch a model\n"})}),"\n",(0,o.jsxs)(n.p,{children:["You can define your action by returning a map of ",(0,o.jsx)(n.code,{children:"ModelAction"})," with the ",(0,o.jsx)(n.code,{children:"@Action"})," annotation in front of your method, you control the access to the action by adding the right control within the ",(0,o.jsx)(n.code,{children:"canAct"})," method, by default the action is denied.\nAction are using the method ",(0,o.jsx)(n.code,{children:"PUT"})," by default."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",metastring:'title="src/mymodel.ts"',children:'class MyModel extends CoreModel {\n\n  @Action()\n  export(context: Context) {\n  \tctx.write("My export");\n  }\n\n  canAct(ctx: Context, action: string) {\n  \tif (action === "export") {\n  \t\treturn this;\n  \t}\n  \treturn super.canAct(ctx,action);\n  }\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"model-schemas",children:"Model schemas"}),"\n",(0,o.jsxs)(n.p,{children:["The schema is generated with ",(0,o.jsx)(n.a,{href:"https://github.com/vega/ts-json-schema-generator",children:"ts-json-schema-generator"})]}),"\n",(0,o.jsxs)(n.p,{children:["All servers properties: starting with a ",(0,o.jsx)(n.code,{children:"_"})," will be ignored in the schema generation"]}),"\n",(0,o.jsx)(n.h3,{id:"jsdocs-annotation",children:"JSDocs Annotation"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"@nullable: allow the attribute to be null\n@asType: to override the default type\n@example: to show an value example\n@minimum: define the minimum value (>=)\n@exclusiveMinimum: define the minimum value (>)\n@maximum: define the maximum value (<=)\n@exclusiveMaximum: define the maximum value (<)\n@multipleOf:\n@minLength:\n@maxLength:\n@minProperties:\n@maxProperties:\n@minItems:\n@maxItems:\n@uniqueItems:\n@propertyNames:\n@contains:\n@const:\n@examples:\n@default:\n@if:\n@then:\n@else:\n@readOnly:\n@writeOnly:\n@deprecated:\n@title:\n@description:\n@id:\n@format:\n@pattern:\n@ref:\n@comment:\n@contentMediaType:\n@contentEncoding:\n"})}),"\n",(0,o.jsx)(n.p,{children:"Additional needed:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"@SchemaAdditionalProperties: add a additionalProperties section (useful to avoid wildcarding the server types)\n@SchemaIgnore: ignore this property from the schema generation (readOnly is probably a better solution)\n"})}),"\n",(0,o.jsx)(n.h2,{id:"relations",children:"Relations"}),"\n",(0,o.jsxs)(n.p,{children:["A ",(0,o.jsx)(n.code,{children:"CoreModel"})," represent one type of object within your application, it can be linked to other type of object."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"1-n: lazy collection   ModelLink <-> ModelLinked\nn-m: is not currently handled as several NoSQL databases won't be able to query\ndenormalized(1-n): denormalized collection ModelLink <-> ModelMap\ndenormalized(n-m): denormalized collection ModelNLink <-> ModelMap\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"ModelMapped: 1:1 mapper\nModelsMapped: 1:n mapper\n\nModelLinksSimpleArray: n:m relation, can be source of a Mapper, it is an array of uuid of the targeted model\nModelLinksArray: n:m relation, can be source of a Mapper, it is an array of object containing the uuid of the targeted model and some additional data\nModelLinksMap: n:m relation, can be source of a Mapper, it is a map of uuid of the targeted model to some attributes.\n\nModelLink: 1:n relation, can be source of a Mapper too, this is normally a Foreign Key within a Relational DataBase\nModelParent: used to defined a hierarchy between model, it is a 'special' `ModelLink`\n\nModelRelated<T>: In a SQL server, it would be querying on the Foreign Key of the table managing the model T\n"})}),"\n",(0,o.jsx)(n.p,{children:"Denormalized are managed through a Mapper service that keeps in sync the mapper."}),"\n",(0,o.jsx)(n.h3,{id:"mapper",children:"Mapper"}),"\n",(0,o.jsxs)(n.p,{children:["A mapper is a ",(0,o.jsx)(n.code,{children:"PartialModel<CoreModel>"})," that represent a target object."]}),"\n",(0,o.jsx)(n.p,{children:"Relations are resolved at compile time."}),"\n",(0,o.jsx)(n.h3,{id:"domain-service",children:"Domain service"}),"\n",(0,o.jsx)(n.p,{children:"The domain service is the service that based on the resolved relationship can automate the creation of the different stores and mapper."}),"\n",(0,o.jsx)(n.p,{children:"It can also expose the GraphQL API"})]})}function h(e={}){const{wrapper:n}={...(0,i.M)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},4552:(e,n,t)=>{t.d(n,{I:()=>r,M:()=>a});var o=t(11504);const i={},s=o.createContext(i);function a(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);