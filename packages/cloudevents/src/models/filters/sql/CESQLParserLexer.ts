// Generated from src/models/filters/sql/CESQLParser.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class CESQLParserLexer extends Lexer {
	public static readonly SPACE = 1;
	public static readonly LR_BRACKET = 2;
	public static readonly RR_BRACKET = 3;
	public static readonly COMMA = 4;
	public static readonly SINGLE_QUOTE_SYMB = 5;
	public static readonly DOUBLE_QUOTE_SYMB = 6;
	public static readonly AND = 7;
	public static readonly OR = 8;
	public static readonly XOR = 9;
	public static readonly NOT = 10;
	public static readonly STAR = 11;
	public static readonly DIVIDE = 12;
	public static readonly MODULE = 13;
	public static readonly PLUS = 14;
	public static readonly MINUS = 15;
	public static readonly EQUAL = 16;
	public static readonly NOT_EQUAL = 17;
	public static readonly GREATER = 18;
	public static readonly GREATER_OR_EQUAL = 19;
	public static readonly LESS = 20;
	public static readonly LESS_GREATER = 21;
	public static readonly LESS_OR_EQUAL = 22;
	public static readonly LIKE = 23;
	public static readonly EXISTS = 24;
	public static readonly IN = 25;
	public static readonly TRUE = 26;
	public static readonly FALSE = 27;
	public static readonly DQUOTED_STRING_LITERAL = 28;
	public static readonly SQUOTED_STRING_LITERAL = 29;
	public static readonly INTEGER_LITERAL = 30;
	public static readonly IDENTIFIER = 31;
	public static readonly IDENTIFIER_WITH_NUMBER = 32;
	public static readonly FUNCTION_IDENTIFIER_WITH_UNDERSCORE = 33;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"SPACE", "ID_LITERAL", "DQUOTA_STRING", "SQUOTA_STRING", "INT_DIGIT", 
		"FN_LITERAL", "LR_BRACKET", "RR_BRACKET", "COMMA", "SINGLE_QUOTE_SYMB", 
		"DOUBLE_QUOTE_SYMB", "QUOTE_SYMB", "AND", "OR", "XOR", "NOT", "STAR", 
		"DIVIDE", "MODULE", "PLUS", "MINUS", "EQUAL", "NOT_EQUAL", "GREATER", 
		"GREATER_OR_EQUAL", "LESS", "LESS_GREATER", "LESS_OR_EQUAL", "LIKE", "EXISTS", 
		"IN", "TRUE", "FALSE", "DQUOTED_STRING_LITERAL", "SQUOTED_STRING_LITERAL", 
		"INTEGER_LITERAL", "IDENTIFIER", "IDENTIFIER_WITH_NUMBER", "FUNCTION_IDENTIFIER_WITH_UNDERSCORE",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, undefined, "'('", "')'", "','", "'''", "'\"'", "'AND'", "'OR'", 
		"'XOR'", "'NOT'", "'*'", "'/'", "'%'", "'+'", "'-'", "'='", "'!='", "'>'", 
		"'>='", "'<'", "'<>'", "'<='", "'LIKE'", "'EXISTS'", "'IN'", "'TRUE'", 
		"'FALSE'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "SPACE", "LR_BRACKET", "RR_BRACKET", "COMMA", "SINGLE_QUOTE_SYMB", 
		"DOUBLE_QUOTE_SYMB", "AND", "OR", "XOR", "NOT", "STAR", "DIVIDE", "MODULE", 
		"PLUS", "MINUS", "EQUAL", "NOT_EQUAL", "GREATER", "GREATER_OR_EQUAL", 
		"LESS", "LESS_GREATER", "LESS_OR_EQUAL", "LIKE", "EXISTS", "IN", "TRUE", 
		"FALSE", "DQUOTED_STRING_LITERAL", "SQUOTED_STRING_LITERAL", "INTEGER_LITERAL", 
		"IDENTIFIER", "IDENTIFIER_WITH_NUMBER", "FUNCTION_IDENTIFIER_WITH_UNDERSCORE",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(CESQLParserLexer._LITERAL_NAMES, CESQLParserLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return CESQLParserLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(CESQLParserLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "CESQLParser.g4"; }

	// @Override
	public get ruleNames(): string[] { return CESQLParserLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return CESQLParserLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return CESQLParserLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return CESQLParserLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02#\xED\b\x01\x04" +
		"\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04" +
		"\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r\t\r" +
		"\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t\x12" +
		"\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t\x17" +
		"\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t\x1C" +
		"\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t\"\x04" +
		"#\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(\t(\x03\x02\x06\x02S\n\x02" +
		"\r\x02\x0E\x02T\x03\x02\x03\x02\x03\x03\x06\x03Z\n\x03\r\x03\x0E\x03[" +
		"\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x07\x04d\n\x04\f\x04" +
		"\x0E\x04g\v\x04\x03\x04\x03\x04\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05" +
		"\x03\x05\x07\x05q\n\x05\f\x05\x0E\x05t\v\x05\x03\x05\x03\x05\x03\x06\x03" +
		"\x06\x03\x07\x03\x07\x07\x07|\n\x07\f\x07\x0E\x07\x7F\v\x07\x03\b\x03" +
		"\b\x03\t\x03\t\x03\n\x03\n\x03\v\x03\v\x03\f\x03\f\x03\r\x03\r\x05\r\x8D" +
		"\n\r\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x03\x0F\x03\x10\x03" +
		"\x10\x03\x10\x03\x10\x03\x11\x03\x11\x03\x11\x03\x11\x03\x12\x03\x12\x03" +
		"\x13\x03\x13\x03\x14\x03\x14\x03\x15\x03\x15\x03\x16\x03\x16\x03\x17\x03" +
		"\x17\x03\x18\x03\x18\x03\x18\x03\x19\x03\x19\x03\x1A\x03\x1A\x03\x1A\x03" +
		"\x1B\x03\x1B\x03\x1C\x03\x1C\x03\x1C\x03\x1D\x03\x1D\x03\x1D\x03\x1E\x03" +
		"\x1E\x03\x1E\x03\x1E\x03\x1E\x03\x1F\x03\x1F\x03\x1F\x03\x1F\x03\x1F\x03" +
		"\x1F\x03\x1F\x03 \x03 \x03 \x03!\x03!\x03!\x03!\x03!\x03\"\x03\"\x03\"" +
		"\x03\"\x03\"\x03\"\x03#\x03#\x03$\x03$\x03%\x06%\xD9\n%\r%\x0E%\xDA\x03" +
		"&\x06&\xDE\n&\r&\x0E&\xDF\x03\'\x06\'\xE3\n\'\r\'\x0E\'\xE4\x03(\x03(" +
		"\x07(\xE9\n(\f(\x0E(\xEC\v(\x02\x02\x02)\x03\x02\x03\x05\x02\x02\x07\x02" +
		"\x02\t\x02\x02\v\x02\x02\r\x02\x02\x0F\x02\x04\x11\x02\x05\x13\x02\x06" +
		"\x15\x02\x07\x17\x02\b\x19\x02\x02\x1B\x02\t\x1D\x02\n\x1F\x02\v!\x02" +
		"\f#\x02\r%\x02\x0E\'\x02\x0F)\x02\x10+\x02\x11-\x02\x12/\x02\x131\x02" +
		"\x143\x02\x155\x02\x167\x02\x179\x02\x18;\x02\x19=\x02\x1A?\x02\x1BA\x02" +
		"\x1CC\x02\x1DE\x02\x1EG\x02\x1FI\x02 K\x02!M\x02\"O\x02#\x03\x02\n\x05" +
		"\x02\v\f\x0F\x0F\"\"\x05\x022;C\\c|\x04\x02$$^^\x04\x02))^^\x03\x022;" +
		"\x03\x02C\\\x04\x02C\\aa\x04\x02C\\c|\x02\xF4\x02\x03\x03\x02\x02\x02" +
		"\x02\x0F\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02" +
		"\x02\x15\x03\x02\x02\x02\x02\x17\x03\x02\x02\x02\x02\x1B\x03\x02\x02\x02" +
		"\x02\x1D\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02!\x03\x02\x02\x02" +
		"\x02#\x03\x02\x02\x02\x02%\x03\x02\x02\x02\x02\'\x03\x02\x02\x02\x02)" +
		"\x03\x02\x02\x02\x02+\x03\x02\x02\x02\x02-\x03\x02\x02\x02\x02/\x03\x02" +
		"\x02\x02\x021\x03\x02\x02\x02\x023\x03\x02\x02\x02\x025\x03\x02\x02\x02" +
		"\x027\x03\x02\x02\x02\x029\x03\x02\x02\x02\x02;\x03\x02\x02\x02\x02=\x03" +
		"\x02\x02\x02\x02?\x03\x02\x02\x02\x02A\x03\x02\x02\x02\x02C\x03\x02\x02" +
		"\x02\x02E\x03\x02\x02\x02\x02G\x03\x02\x02\x02\x02I\x03\x02\x02\x02\x02" +
		"K\x03\x02\x02\x02\x02M\x03\x02\x02\x02\x02O\x03\x02\x02\x02\x03R\x03\x02" +
		"\x02\x02\x05Y\x03\x02\x02\x02\x07]\x03\x02\x02\x02\tj\x03\x02\x02\x02" +
		"\vw\x03\x02\x02\x02\ry\x03\x02\x02\x02\x0F\x80\x03\x02\x02\x02\x11\x82" +
		"\x03\x02\x02\x02\x13\x84\x03\x02\x02\x02\x15\x86\x03\x02\x02\x02\x17\x88" +
		"\x03\x02\x02\x02\x19\x8C\x03\x02\x02\x02\x1B\x8E\x03\x02\x02\x02\x1D\x92" +
		"\x03\x02\x02\x02\x1F\x95\x03\x02\x02\x02!\x99\x03\x02\x02\x02#\x9D\x03" +
		"\x02\x02\x02%\x9F\x03\x02\x02\x02\'\xA1\x03\x02\x02\x02)\xA3\x03\x02\x02" +
		"\x02+\xA5\x03\x02\x02\x02-\xA7\x03\x02\x02\x02/\xA9\x03\x02\x02\x021\xAC" +
		"\x03\x02\x02\x023\xAE\x03\x02\x02\x025\xB1\x03\x02\x02\x027\xB3\x03\x02" +
		"\x02\x029\xB6\x03\x02\x02\x02;\xB9\x03\x02\x02\x02=\xBE\x03\x02\x02\x02" +
		"?\xC5\x03\x02\x02\x02A\xC8\x03\x02\x02\x02C\xCD\x03\x02\x02\x02E\xD3\x03" +
		"\x02\x02\x02G\xD5\x03\x02\x02\x02I\xD8\x03\x02\x02\x02K\xDD\x03\x02\x02" +
		"\x02M\xE2\x03\x02\x02\x02O\xE6\x03\x02\x02\x02QS\t\x02\x02\x02RQ\x03\x02" +
		"\x02\x02ST\x03\x02\x02\x02TR\x03\x02\x02\x02TU\x03\x02\x02\x02UV\x03\x02" +
		"\x02\x02VW\b\x02\x02\x02W\x04\x03\x02\x02\x02XZ\t\x03\x02\x02YX\x03\x02" +
		"\x02\x02Z[\x03\x02\x02\x02[Y\x03\x02\x02\x02[\\\x03\x02\x02\x02\\\x06" +
		"\x03\x02\x02\x02]e\x07$\x02\x02^_\x07^\x02\x02_d\v\x02\x02\x02`a\x07$" +
		"\x02\x02ad\x07$\x02\x02bd\n\x04\x02\x02c^\x03\x02\x02\x02c`\x03\x02\x02" +
		"\x02cb\x03\x02\x02\x02dg\x03\x02\x02\x02ec\x03\x02\x02\x02ef\x03\x02\x02" +
		"\x02fh\x03\x02\x02\x02ge\x03\x02\x02\x02hi\x07$\x02\x02i\b\x03\x02\x02" +
		"\x02jr\x07)\x02\x02kl\x07^\x02\x02lq\v\x02\x02\x02mn\x07)\x02\x02nq\x07" +
		")\x02\x02oq\n\x05\x02\x02pk\x03\x02\x02\x02pm\x03\x02\x02\x02po\x03\x02" +
		"\x02\x02qt\x03\x02\x02\x02rp\x03\x02\x02\x02rs\x03\x02\x02\x02su\x03\x02" +
		"\x02\x02tr\x03\x02\x02\x02uv\x07)\x02\x02v\n\x03\x02\x02\x02wx\t\x06\x02" +
		"\x02x\f\x03\x02\x02\x02y}\t\x07\x02\x02z|\t\b\x02\x02{z\x03\x02\x02\x02" +
		"|\x7F\x03\x02\x02\x02}{\x03\x02\x02\x02}~\x03\x02\x02\x02~\x0E\x03\x02" +
		"\x02\x02\x7F}\x03\x02\x02\x02\x80\x81\x07*\x02\x02\x81\x10\x03\x02\x02" +
		"\x02\x82\x83\x07+\x02\x02\x83\x12\x03\x02\x02\x02\x84\x85\x07.\x02\x02" +
		"\x85\x14\x03\x02\x02\x02\x86\x87\x07)\x02\x02\x87\x16\x03\x02\x02\x02" +
		"\x88\x89\x07$\x02\x02\x89\x18\x03\x02\x02\x02\x8A\x8D\x05\x15\v\x02\x8B" +
		"\x8D\x05\x17\f\x02\x8C\x8A\x03\x02\x02\x02\x8C\x8B\x03\x02\x02\x02\x8D" +
		"\x1A\x03\x02\x02\x02\x8E\x8F\x07C\x02\x02\x8F\x90\x07P\x02\x02\x90\x91" +
		"\x07F\x02\x02\x91\x1C\x03\x02\x02\x02\x92\x93\x07Q\x02\x02\x93\x94\x07" +
		"T\x02\x02\x94\x1E\x03\x02\x02\x02\x95\x96\x07Z\x02\x02\x96\x97\x07Q\x02" +
		"\x02\x97\x98\x07T\x02\x02\x98 \x03\x02\x02\x02\x99\x9A\x07P\x02\x02\x9A" +
		"\x9B\x07Q\x02\x02\x9B\x9C\x07V\x02\x02\x9C\"\x03\x02\x02\x02\x9D\x9E\x07" +
		",\x02\x02\x9E$\x03\x02\x02\x02\x9F\xA0\x071\x02\x02\xA0&\x03\x02\x02\x02" +
		"\xA1\xA2\x07\'\x02\x02\xA2(\x03\x02\x02\x02\xA3\xA4\x07-\x02\x02\xA4*" +
		"\x03\x02\x02\x02\xA5\xA6\x07/\x02\x02\xA6,\x03\x02\x02\x02\xA7\xA8\x07" +
		"?\x02\x02\xA8.\x03\x02\x02\x02\xA9\xAA\x07#\x02\x02\xAA\xAB\x07?\x02\x02" +
		"\xAB0\x03\x02\x02\x02\xAC\xAD\x07@\x02\x02\xAD2\x03\x02\x02\x02\xAE\xAF" +
		"\x07@\x02\x02\xAF\xB0\x07?\x02\x02\xB04\x03\x02\x02\x02\xB1\xB2\x07>\x02" +
		"\x02\xB26\x03\x02\x02\x02\xB3\xB4\x07>\x02\x02\xB4\xB5\x07@\x02\x02\xB5" +
		"8\x03\x02\x02\x02\xB6\xB7\x07>\x02\x02\xB7\xB8\x07?\x02\x02\xB8:\x03\x02" +
		"\x02\x02\xB9\xBA\x07N\x02\x02\xBA\xBB\x07K\x02\x02\xBB\xBC\x07M\x02\x02" +
		"\xBC\xBD\x07G\x02\x02\xBD<\x03\x02\x02\x02\xBE\xBF\x07G\x02\x02\xBF\xC0" +
		"\x07Z\x02\x02\xC0\xC1\x07K\x02\x02\xC1\xC2\x07U\x02\x02\xC2\xC3\x07V\x02" +
		"\x02\xC3\xC4\x07U\x02\x02\xC4>\x03\x02\x02\x02\xC5\xC6\x07K\x02\x02\xC6" +
		"\xC7\x07P\x02\x02\xC7@\x03\x02\x02\x02\xC8\xC9\x07V\x02\x02\xC9\xCA\x07" +
		"T\x02\x02\xCA\xCB\x07W\x02\x02\xCB\xCC\x07G\x02\x02\xCCB\x03\x02\x02\x02" +
		"\xCD\xCE\x07H\x02\x02\xCE\xCF\x07C\x02\x02\xCF\xD0\x07N\x02\x02\xD0\xD1" +
		"\x07U\x02\x02\xD1\xD2\x07G\x02\x02\xD2D\x03\x02\x02\x02\xD3\xD4\x05\x07" +
		"\x04\x02\xD4F\x03\x02\x02\x02\xD5\xD6\x05\t\x05\x02\xD6H\x03\x02\x02\x02" +
		"\xD7\xD9\x05\v\x06\x02\xD8\xD7\x03\x02\x02\x02\xD9\xDA\x03\x02\x02\x02" +
		"\xDA\xD8\x03\x02\x02\x02\xDA\xDB\x03\x02\x02\x02\xDBJ\x03\x02\x02\x02" +
		"\xDC\xDE\t\t\x02\x02\xDD\xDC\x03\x02\x02\x02\xDE\xDF\x03\x02\x02\x02\xDF" +
		"\xDD\x03\x02\x02\x02\xDF\xE0\x03\x02\x02\x02\xE0L\x03\x02\x02\x02\xE1" +
		"\xE3\t\x03\x02\x02\xE2\xE1\x03\x02\x02\x02\xE3\xE4\x03\x02\x02\x02\xE4" +
		"\xE2\x03\x02\x02\x02\xE4\xE5\x03\x02\x02\x02\xE5N\x03\x02\x02\x02\xE6" +
		"\xEA\t\x07\x02\x02\xE7\xE9\t\b\x02\x02\xE8\xE7\x03\x02\x02\x02\xE9\xEC" +
		"\x03\x02\x02\x02\xEA\xE8\x03\x02\x02\x02\xEA\xEB\x03\x02\x02\x02\xEBP" +
		"\x03\x02\x02\x02\xEC\xEA\x03\x02\x02\x02\x0F\x02T[cepr}\x8C\xDA\xDF\xE4" +
		"\xEA\x03\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!CESQLParserLexer.__ATN) {
			CESQLParserLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(CESQLParserLexer._serializedATN));
		}

		return CESQLParserLexer.__ATN;
	}

}

