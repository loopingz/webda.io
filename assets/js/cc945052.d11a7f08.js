"use strict";(self.webpackChunk_webda_docs=self.webpackChunk_webda_docs||[]).push([[52016],{28756:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>t,toc:()=>c});var l=s(17624),o=s(4552);const i={},r=void 0,t={id:"Concepts/Models/ModelDriven",title:"ModelDriven",description:"Definitions",source:"@site/pages/Concepts/Models/ModelDriven.md",sourceDirName:"Concepts/Models",slug:"/Concepts/Models/ModelDriven",permalink:"/docs/Concepts/Models/ModelDriven",draft:!1,unlisted:!1,editUrl:"https://github.com/loopingz/webda.io/tree/docs/pages/Concepts/Models/ModelDriven.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"JSONSchema",permalink:"/docs/Concepts/Models/JSONSchema"},next:{title:"Role Acl Model",permalink:"/docs/Concepts/Models/RoleAclModel"}},d={},c=[{value:"Definitions",id:"definitions",level:2}];function a(e){const n={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.M)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.h2,{id:"definitions",children:"Definitions"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Ancestor:"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"An Ancestor is a Model that is part of the class hierarchy of another model"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"class ClassA extends CoreModel {}\nclass ClassB extends ClassA {}\nclass ClassC extends ClassA {}\n"})}),"\n",(0,l.jsxs)(n.p,{children:["In this example ",(0,l.jsx)(n.code,{children:"ClassA"})," is an ancestor of ",(0,l.jsx)(n.code,{children:"ClassB"})," and ",(0,l.jsx)(n.code,{children:"ClassC"}),", and ",(0,l.jsx)(n.code,{children:"CoreModel"})," is a common ancestor to all. ",(0,l.jsx)(n.code,{children:"ClassB"})," is ",(0,l.jsx)(n.strong,{children:"NOT"})," an ancestor of ",(0,l.jsx)(n.code,{children:"ClassC"})]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Parent"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"A parent is defined in the class relationship. It is not linked to any of the class hierarchy."}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Store"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"This is the service that is in-charge of persisting the models somewhere (NoSQL, File, Memory)"}),"\n",(0,l.jsx)(n.p,{children:"Define your model we can:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"create models diagram with entity relationship"}),"\n",(0,l.jsx)(n.li,{children:"define how it is stored"}),"\n",(0,l.jsx)(n.li,{children:"define the schema or schemas"}),"\n",(0,l.jsx)(n.li,{children:"define graphql access"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"Model have UUID accross the whole framework"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"MODEL-UUID"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"Model define:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"attributes"}),"\n",(0,l.jsx)(n.li,{children:"methods"}),"\n",(0,l.jsx)(n.li,{children:"links"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"CoreModel will always have a Store, default is the Registry."}),"\n",(0,l.jsx)(n.p,{children:"The relationships between models can be:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"ModelParent"}),": Define the parent of current model"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"ModelLink"}),": Define a 1:1 or 1",":n"," link from current model"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"ModelArrayLinks"}),": Define a n:1 or n",":m"," link from current model (the ids are defined within an array)"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"ModelMapLinks"}),": Define a n:1 or n",":m"," link from current model (the ids are the map key, and value is usually a subset of target object with or without additional properties)"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"ModelLinked"}),": Define a subcollection accessible via query"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"ModelMapped"}),": Define a collection that is synchronized by ",(0,l.jsx)(n.code,{children:"ModelMapper"})]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"These relations will be compiled with additional behavior.\nGetter/setter will be added for you at compile time, the source code would also be updated by the build."}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["We understand modifying source at build might sound weird, but we need to define the setter for you, to give the best experience, you can disable this behavior by adding a ",(0,l.jsx)(n.code,{children:"noEmitModelRelationSetter: true"})]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"The graph of model is deduced from your models:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:'"models": {\n\n},\n"modelsGraph": {\n    "modelA": {\n        "extends": [],\n        "parent": {\n            "attribute": "",\n            "model": ""\n        },\n        "links": [\n            {\n                "type": "link",\n                "attribute": "category",\n                "model": "modelC"\n            }, {\n                "type": "arraylinks",\n                "attribute": "category",\n                "model": "modelC"\n            }, {\n                "type": "maplinks",\n                "attribute": "category",\n                "model": "modelC"\n            }\n        ],\n        "maps": [],\n        "queries": [\n            {\n                "attribute": "comments",\n                "model": "modelC"\n            }\n        ]\n    }\n}\n'})}),"\n",(0,l.jsx)(n.p,{children:"You can now access directly from your model class:"}),"\n",(0,l.jsx)(n.p,{children:"CoreModel.ref().get() -> CoreModel.store().get()\nCoreModel.query() -> CoreModel.store().query()\nCoreModel.ref().patch()\nCoreModel.ref().delete()"}),"\n",(0,l.jsxs)(n.p,{children:["A ",(0,l.jsx)(n.code,{children:"StoreResolver"})," should match from a class the Store"]}),"\n",(0,l.jsx)(n.p,{children:"Store(strict): Only handle its model\nStore(no-strict): Handle any declared models and their child classes\nStore(wildcard): Catch all the model that are not managed by any store"})]})}function h(e={}){const{wrapper:n}={...(0,o.M)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(a,{...e})}):a(e)}},4552:(e,n,s)=>{s.d(n,{I:()=>t,M:()=>r});var l=s(11504);const o={},i=l.createContext(o);function r(e){const n=l.useContext(i);return l.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),l.createElement(i.Provider,{value:n},e.children)}}}]);