{
  "$schema": "https://webda.io/schemas/webda.module.v4.json",
  "beans": {
    "WebdaDemo/BeanService": {
      "Import": "lib/services/bean:BeanService",
      "Schema": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Type of the service"
          }
        },
        "required": [
          "type"
        ],
        "description": "Interface to specify the Service parameters",
        "$schema": "http://json-schema.org/draft-07/schema#",
        "title": "ThirdOtherService"
      }
    },
    "WebdaDemo/CustomService": {
      "Import": "lib/services/custom:CustomService",
      "Schema": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Type of the service"
          },
          "introspection": {
            "$ref": "#/definitions/Partial%3Cclass-interfaces.d.ts-0-349-interfaces.d.ts-0-390976353190%3E"
          }
        },
        "required": [
          "introspection",
          "type"
        ],
        "$schema": "http://json-schema.org/draft-07/schema#",
        "definitions": {
          "Partial<class-interfaces.d.ts-0-349-interfaces.d.ts-0-390976353190>": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "description": "Type of the service"
              }
            }
          }
        },
        "title": "CustomService"
      }
    },
    "WebdaDemo/SampleAppGoodBean": {
      "Import": "lib/services/bean:SampleAppGoodBean",
      "Schema": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Type of the service"
          }
        },
        "required": [
          "type"
        ],
        "description": "Interface to specify the Service parameters",
        "$schema": "http://json-schema.org/draft-07/schema#",
        "title": "ThirdOtherService"
      }
    }
  },
  "deployers": {
    "WebdaDemo/CustomDeployer": {
      "Import": "lib/services/deployer:CustomDeployer",
      "Schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "$schema": "http://json-schema.org/draft-07/schema#",
        "title": "CustomDeployer"
      }
    }
  },
  "moddas": {
    "WebdaDemo/AnotherService": {
      "Import": "lib/services/compiler:AnotherService",
      "Schema": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Type of the service"
          },
          "anotherParameter": {
            "type": "string"
          },
          "interfaceParam": {
            "$ref": "#/definitions/Partial%3Cinterface-vices_compiler.ts-250-298-vices_compiler.ts-0-1248%3E",
            "description": "The Partial will generate a new $ref"
          }
        },
        "required": [
          "anotherParameter",
          "interfaceParam",
          "type"
        ],
        "$schema": "http://json-schema.org/draft-07/schema#",
        "definitions": {
          "Partial<interface-vices_compiler.ts-250-298-vices_compiler.ts-0-1248>": {
            "type": "object",
            "properties": {
              "test": {
                "type": "string"
              }
            }
          }
        },
        "title": "AnotherService"
      }
    },
    "WebdaDemo/CustomReusableService": {
      "Import": "lib/services/reusable:default",
      "Schema": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Type of the service"
          },
          "mandatoryField": {
            "type": "string"
          }
        },
        "required": [
          "mandatoryField",
          "type"
        ],
        "$schema": "http://json-schema.org/draft-07/schema#",
        "title": "CustomReusableService"
      }
    },
    "WebdaDemo/FourthOtherService": {
      "Import": "lib/services/compiler:FourthOtherService",
      "Schema": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Type of the service"
          },
          "anotherParameter": {
            "type": "string"
          },
          "interfaceParam": {
            "$ref": "#/definitions/Partial%3Cinterface-vices_compiler.ts-250-298-vices_compiler.ts-0-1248%3E",
            "description": "The Partial will generate a new $ref"
          },
          "fourthParameter": {
            "type": "number",
            "minimum": 100,
            "maximum": 1000
          }
        },
        "required": [
          "anotherParameter",
          "fourthParameter",
          "interfaceParam",
          "type"
        ],
        "$schema": "http://json-schema.org/draft-07/schema#",
        "definitions": {
          "Partial<interface-vices_compiler.ts-250-298-vices_compiler.ts-0-1248>": {
            "type": "object",
            "properties": {
              "test": {
                "type": "string"
              }
            }
          }
        },
        "title": "FourthOtherService"
      }
    },
    "WebdaDemo/QueueService": {
      "Import": "lib/services/compiler:QueueService",
      "Schema": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Type of the service"
          },
          "workerDelayer": {
            "type": "object",
            "properties": {
              "interval": {
                "type": "number",
                "description": "Interval"
              },
              "type": {
                "type": "string",
                "description": "Type of delayer registered in WaitDelayerFactoryRegistry"
              }
            },
            "required": [
              "interval",
              "type"
            ],
            "description": "Delayer between two failed attempts to process messages"
          },
          "workerParallelism": {
            "type": "boolean",
            "description": "Define if worker should process multi message received in //",
            "default": true
          },
          "maxConsumers": {
            "type": "number",
            "description": "Max number of queue consumers Queue will auto increase to this max number if queue is loaded and it will decrease to just one consumer if no messages are available",
            "default": 10
          },
          "expire": {
            "type": "number",
            "description": "Number of seconds before droping message",
            "default": 30
          }
        },
        "required": [
          "maxConsumers",
          "type",
          "workerParallelism"
        ],
        "$schema": "http://json-schema.org/draft-07/schema#",
        "title": "QueueService"
      }
    },
    "WebdaDemo/SecondOtherService": {
      "Import": "lib/services/compiler:SecondOtherService",
      "Schema": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Type of the service"
          },
          "anotherParameter": {
            "type": "string"
          },
          "interfaceParam": {
            "$ref": "#/definitions/Partial%3Cinterface-vices_compiler.ts-250-298-vices_compiler.ts-0-1248%3E",
            "description": "The Partial will generate a new $ref"
          }
        },
        "required": [
          "anotherParameter",
          "interfaceParam",
          "type"
        ],
        "$schema": "http://json-schema.org/draft-07/schema#",
        "definitions": {
          "Partial<interface-vices_compiler.ts-250-298-vices_compiler.ts-0-1248>": {
            "type": "object",
            "properties": {
              "test": {
                "type": "string"
              }
            }
          }
        },
        "title": "SecondOtherService"
      }
    },
    "WebdaDemo/SimpleService": {
      "Import": "lib/services/compiler:SimpleService",
      "Schema": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Type of the service"
          }
        },
        "required": [
          "type"
        ],
        "description": "Interface to specify the Service parameters",
        "$schema": "http://json-schema.org/draft-07/schema#",
        "title": "ThirdOtherService"
      }
    },
    "WebdaDemo/ThirdOtherService": {
      "Import": "lib/services/compiler:ThirdOtherService",
      "Schema": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Type of the service"
          }
        },
        "required": [
          "type"
        ],
        "description": "Interface to specify the Service parameters",
        "$schema": "http://json-schema.org/draft-07/schema#",
        "title": "ThirdOtherService"
      }
    }
  },
  "models": {
    "WebdaDemo/AbstractProject": {
      "Plural": "AbstractProjects",
      "Import": "lib/models/project:AbstractProject",
      "Relations": {},
      "Ancestors": [],
      "Subclasses": [
        "WebdaDemo/Project"
      ],
      "Reflection": {
        "_creator": {
          "type": "string"
        },
        "__acl": {
          "type": "Acl"
        },
        "_permissions": {
          "type": "Array",
          "typeParameters": [
            "string"
          ]
        },
        "test": {
          "type": "Date"
        },
        "Events": {
          "type": "CoreModelEvents",
          "typeParameters": [
            "CoreModel"
          ]
        },
        "__class": {
          "type": "ModelDefinition<this> & {\n        Store: typeof CoreModel.Store;\n    }"
        },
        "_creationDate": {
          "type": "Date"
        },
        "_lastUpdate": {
          "type": "Date"
        },
        "_new": {
          "type": "boolean"
        },
        "__dirty": {
          "type": "Set",
          "typeParameters": [
            "string"
          ]
        },
        "__context": {
          "type": "any"
        }
      },
      "Schema": {
        "type": "object",
        "properties": {
          "context": {
            "type": "object",
            "properties": {
              "caches": {
                "description": "Get the caches linked to the context"
              },
              "_promises": {
                "type": "array",
                "items": {},
                "description": "Contain all registered promises to this context",
                "readOnly": true
              }
            },
            "required": [
              "caches"
            ],
            "description": "Context is the object that will be passed to the services"
          },
          "Events": {
            "$ref": "#/definitions/CoreModelEvents%3C%3E"
          },
          "_creationDate": {
            "type": "string",
            "format": "date-time",
            "description": "Creation date",
            "readOnly": true
          },
          "_lastUpdate": {
            "type": "string",
            "format": "date-time",
            "description": "Last update date",
            "readOnly": true
          },
          "_new": {
            "type": "boolean",
            "description": "The model is new and not saved yet\n\nIt is set by the factory method and by the create method",
            "readOnly": true
          },
          "_creator": {
            "type": "string",
            "description": "Object creator",
            "readOnly": true
          }
        },
        "required": [
          "Events",
          "context"
        ],
        "description": "This file contains several empty methods to test our auto docs\n\nAbstract class should not be exported as model",
        "$schema": "http://json-schema.org/draft-07/schema#",
        "definitions": {
          "CoreModelEvents<>": {
            "type": "object",
            "properties": {
              "Create": {
                "type": "object",
                "properties": {
                  "object_id": {
                    "type": "string"
                  },
                  "object": {}
                },
                "required": [
                  "object_id",
                  "object"
                ]
              },
              "PartialUpdate": {},
              "Delete": {
                "type": "object",
                "properties": {
                  "object_id": {
                    "type": "string"
                  }
                },
                "required": [
                  "object_id"
                ]
              },
              "Update": {
                "type": "object",
                "properties": {
                  "object_id": {
                    "type": "string"
                  },
                  "object": {},
                  "previous": {}
                },
                "required": [
                  "object_id",
                  "object",
                  "previous"
                ]
              }
            },
            "required": [
              "Create",
              "PartialUpdate",
              "Delete",
              "Update"
            ],
            "description": "Event sent by models\n\nEvents are sent by the model to notify of changes after the changes are done\n\nIf you need to prevent the change, you should extend the object"
          }
        },
        "title": "AbstractProject"
      }
    },
    "WebdaDemo/AnotherSubProject": {
      "Plural": "AnotherSubProjects",
      "Import": "lib/models/project:AnotherSubProject",
      "Relations": {
        "parent": {
          "attribute": "_company",
          "model": "WebdaDemo/Company"
        }
      },
      "Ancestors": [
        "WebdaDemo/Project",
        "WebdaDemo/AbstractProject"
      ],
      "Subclasses": [
        "WebdaDemo/SubSubProject"
      ],
      "Reflection": {
        "_company": {
          "type": "ModelParent",
          "typeParameters": [
            "Company"
          ]
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "uuid": {
          "type": "string"
        },
        "n": {
          "type": "number"
        },
        "test2": {
          "type": "string"
        },
        "protectMe": {
          "type": "{\n    /**\n     * Some doc\n     */\n    test: string;\n    /**\n     * Other doc\n     */\n    n: number;\n  }"
        },
        "_creator": {
          "type": "string"
        },
        "__acl": {
          "type": "Acl"
        },
        "_permissions": {
          "type": "Array",
          "typeParameters": [
            "string"
          ]
        },
        "test": {
          "type": "Date"
        },
        "Events": {
          "type": "CoreModelEvents",
          "typeParameters": [
            "CoreModel"
          ]
        },
        "__class": {
          "type": "ModelDefinition<this> & {\n        Store: typeof CoreModel.Store;\n    }"
        },
        "_creationDate": {
          "type": "Date"
        },
        "_lastUpdate": {
          "type": "Date"
        },
        "_new": {
          "type": "boolean"
        },
        "__dirty": {
          "type": "Set",
          "typeParameters": [
            "string"
          ]
        },
        "__context": {
          "type": "any"
        }
      },
      "Schema": {
        "type": "object",
        "properties": {
          "n": {
            "type": "number"
          },
          "test2": {
            "type": "string"
          },
          "context": {
            "type": "object",
            "properties": {
              "caches": {
                "description": "Get the caches linked to the context"
              },
              "_promises": {
                "type": "array",
                "items": {},
                "description": "Contain all registered promises to this context",
                "readOnly": true
              }
            },
            "required": [
              "caches"
            ],
            "description": "Context is the object that will be passed to the services"
          },
          "Events": {
            "$ref": "#/definitions/CoreModelEvents%3C%3E"
          },
          "_creationDate": {
            "type": "string",
            "format": "date-time",
            "description": "Creation date",
            "readOnly": true
          },
          "_lastUpdate": {
            "type": "string",
            "format": "date-time",
            "description": "Last update date",
            "readOnly": true
          },
          "_new": {
            "type": "boolean",
            "description": "The model is new and not saved yet\n\nIt is set by the factory method and by the create method",
            "readOnly": true
          },
          "_creator": {
            "type": "string",
            "description": "Object creator",
            "readOnly": true
          },
          "_company": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "uuid": {
            "type": "string"
          }
        },
        "required": [
          "Events",
          "context",
          "n",
          "name",
          "test2",
          "type",
          "uuid"
        ],
        "description": "Test of TypeParams",
        "$schema": "http://json-schema.org/draft-07/schema#",
        "definitions": {
          "CoreModelEvents<>": {
            "type": "object",
            "properties": {
              "Create": {
                "type": "object",
                "properties": {
                  "object_id": {
                    "type": "string"
                  },
                  "object": {}
                },
                "required": [
                  "object_id",
                  "object"
                ]
              },
              "PartialUpdate": {},
              "Delete": {
                "type": "object",
                "properties": {
                  "object_id": {
                    "type": "string"
                  }
                },
                "required": [
                  "object_id"
                ]
              },
              "Update": {
                "type": "object",
                "properties": {
                  "object_id": {
                    "type": "string"
                  },
                  "object": {},
                  "previous": {}
                },
                "required": [
                  "object_id",
                  "object",
                  "previous"
                ]
              }
            },
            "required": [
              "Create",
              "PartialUpdate",
              "Delete",
              "Update"
            ],
            "description": "Event sent by models\n\nEvents are sent by the model to notify of changes after the changes are done\n\nIf you need to prevent the change, you should extend the object"
          }
        },
        "title": "AnotherSubProject"
      }
    },
    "WebdaDemo/Brand": {
      "Plural": "Brands",
      "Import": "lib/models/relations:Brand",
      "Relations": {},
      "Ancestors": [],
      "Subclasses": [],
      "Reflection": {
        "name": {
          "type": "string"
        },
        "uuid": {
          "type": "string"
        },
        "Events": {
          "type": "CoreModelEvents",
          "typeParameters": [
            "CoreModel"
          ]
        },
        "__class": {
          "type": "ModelDefinition<this> & {\n        Store: typeof CoreModel.Store;\n    }"
        },
        "_creationDate": {
          "type": "Date"
        },
        "_lastUpdate": {
          "type": "Date"
        },
        "_new": {
          "type": "boolean"
        },
        "__dirty": {
          "type": "Set",
          "typeParameters": [
            "string"
          ]
        },
        "__context": {
          "type": "any"
        }
      },
      "Schema": {
        "type": "object",
        "properties": {
          "context": {
            "type": "object",
            "properties": {
              "caches": {
                "description": "Get the caches linked to the context"
              },
              "_promises": {
                "type": "array",
                "items": {},
                "description": "Contain all registered promises to this context",
                "readOnly": true
              }
            },
            "required": [
              "caches"
            ],
            "description": "Context is the object that will be passed to the services"
          },
          "Events": {
            "$ref": "#/definitions/CoreModelEvents%3C%3E"
          },
          "_creationDate": {
            "type": "string",
            "format": "date-time",
            "description": "Creation date",
            "readOnly": true
          },
          "_lastUpdate": {
            "type": "string",
            "format": "date-time",
            "description": "Last update date",
            "readOnly": true
          },
          "_new": {
            "type": "boolean",
            "description": "The model is new and not saved yet\n\nIt is set by the factory method and by the create method",
            "readOnly": true
          },
          "uuid": {
            "type": "string",
            "readOnly": true,
            "$generated": true
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "Events",
          "context",
          "name"
        ],
        "description": "Model not exposed on purpose",
        "$schema": "http://json-schema.org/draft-07/schema#",
        "definitions": {
          "CoreModelEvents<>": {
            "type": "object",
            "properties": {
              "Create": {
                "type": "object",
                "properties": {
                  "object_id": {
                    "type": "string"
                  },
                  "object": {}
                },
                "required": [
                  "object_id",
                  "object"
                ]
              },
              "PartialUpdate": {},
              "Delete": {
                "type": "object",
                "properties": {
                  "object_id": {
                    "type": "string"
                  }
                },
                "required": [
                  "object_id"
                ]
              },
              "Update": {
                "type": "object",
                "properties": {
                  "object_id": {
                    "type": "string"
                  },
                  "object": {},
                  "previous": {}
                },
                "required": [
                  "object_id",
                  "object",
                  "previous"
                ]
              }
            },
            "required": [
              "Create",
              "PartialUpdate",
              "Delete",
              "Update"
            ],
            "description": "Event sent by models\n\nEvents are sent by the model to notify of changes after the changes are done\n\nIf you need to prevent the change, you should extend the object"
          }
        },
        "title": "Brand"
      }
    },
    "WebdaDemo/Classroom": {
      "Plural": "Classrooms",
      "Import": "lib/models/relations:Classroom",
      "Relations": {
        "maps": [
          {
            "attribute": "courses",
            "cascadeDelete": false,
            "model": "WebdaDemo/Course",
            "targetLink": "classroom",
            "targetAttributes": [
              "name",
              "uuid"
            ]
          }
        ],
        "queries": [
          {
            "attribute": "hardwares",
            "model": "WebdaDemo/Hardware",
            "targetAttribute": "classroom"
          }
        ]
      },
      "Ancestors": [],
      "Subclasses": [],
      "Reflection": {
        "uuid": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "courses": {
          "type": "ModelsMapped",
          "typeParameters": [
            "Course",
            "\"classroom\"",
            "\"name\""
          ]
        },
        "hardwares": {
          "type": "ModelRelated",
          "typeParameters": [
            "Hardware",
            "\"classroom\""
          ]
        },
        "Events": {
          "type": "CoreModelEvents",
          "typeParameters": [
            "CoreModel"
          ]
        },
        "__class": {
          "type": "ModelDefinition<this> & {\n        Store: typeof CoreModel.Store;\n    }"
        },
        "_creationDate": {
          "type": "Date"
        },
        "_lastUpdate": {
          "type": "Date"
        },
        "_new": {
          "type": "boolean"
        },
        "__dirty": {
          "type": "Set",
          "typeParameters": [
            "string"
          ]
        },
        "__context": {
          "type": "any"
        }
      },
      "Schema": {
        "type": "object",
        "properties": {
          "context": {
            "type": "object",
            "properties": {
              "caches": {
                "description": "Get the caches linked to the context"
              },
              "_promises": {
                "type": "array",
                "items": {},
                "description": "Contain all registered promises to this context",
                "readOnly": true
              }
            },
            "required": [
              "caches"
            ],
            "description": "Context is the object that will be passed to the services"
          },
          "Events": {
            "$ref": "#/definitions/CoreModelEvents%3C%3E"
          },
          "_creationDate": {
            "type": "string",
            "format": "date-time",
            "description": "Creation date",
            "readOnly": true
          },
          "_lastUpdate": {
            "type": "string",
            "format": "date-time",
            "description": "Last update date",
            "readOnly": true
          },
          "_new": {
            "type": "boolean",
            "description": "The model is new and not saved yet\n\nIt is set by the factory method and by the create method",
            "readOnly": true
          },
          "uuid": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "courses": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "uuid": {
                  "type": "string"
                }
              },
              "required": [
                "name",
                "uuid"
              ],
              "additionalProperties": false
            },
            "readOnly": true
          }
        },
        "required": [
          "Events",
          "context",
          "name",
          "uuid"
        ],
        "$schema": "http://json-schema.org/draft-07/schema#",
        "definitions": {
          "CoreModelEvents<>": {
            "type": "object",
            "properties": {
              "Create": {
                "type": "object",
                "properties": {
                  "object_id": {
                    "type": "string"
                  },
                  "object": {}
                },
                "required": [
                  "object_id",
                  "object"
                ]
              },
              "PartialUpdate": {},
              "Delete": {
                "type": "object",
                "properties": {
                  "object_id": {
                    "type": "string"
                  }
                },
                "required": [
                  "object_id"
                ]
              },
              "Update": {
                "type": "object",
                "properties": {
                  "object_id": {
                    "type": "string"
                  },
                  "object": {},
                  "previous": {}
                },
                "required": [
                  "object_id",
                  "object",
                  "previous"
                ]
              }
            },
            "required": [
              "Create",
              "PartialUpdate",
              "Delete",
              "Update"
            ],
            "description": "Event sent by models\n\nEvents are sent by the model to notify of changes after the changes are done\n\nIf you need to prevent the change, you should extend the object"
          }
        },
        "title": "Classroom"
      }
    },
    "WebdaDemo/Company": {
      "Plural": "Companies",
      "Import": "lib/models/company:Company",
      "Relations": {
        "maps": [
          {
            "attribute": "_projects",
            "cascadeDelete": false,
            "model": "WebdaDemo/Project",
            "targetLink": "_company",
            "targetAttributes": [
              "name",
              "type",
              "uuid"
            ]
          }
        ],
        "queries": [
          {
            "attribute": "users",
            "model": "WebdaDemo/User",
            "targetAttribute": "_company"
          }
        ]
      },
      "Ancestors": [],
      "Subclasses": [],
      "Reflection": {
        "_projects": {
          "type": "ModelsMapped",
          "typeParameters": [
            "Project",
            "\"_company\"",
            "\"name\" | \"type\""
          ]
        },
        "users": {
          "type": "ModelRelated",
          "typeParameters": [
            "User",
            "\"_company\""
          ]
        },
        "name": {
          "type": "string"
        },
        "mapString": {
          "type": "{ [key: string]: string }"
        },
        "mapAny": {
          "type": "{ [key: string]: any }"
        },
        "mapNumber": {
          "type": "{ [key: string]: number }"
        },
        "mapBoolean": {
          "type": "{ [key: string]: boolean }"
        },
        "mapObject": {
          "type": "{ [key: string]: { test: number; b: boolean; status: string } }"
        },
        "permissions": {
          "type": "Array",
          "typeParameters": [
            "Permission"
          ]
        },
        "Events": {
          "type": "CoreModelEvents",
          "typeParameters": [
            "CoreModel"
          ]
        },
        "__class": {
          "type": "ModelDefinition<this> & {\n        Store: typeof CoreModel.Store;\n    }"
        },
        "_creationDate": {
          "type": "Date"
        },
        "_lastUpdate": {
          "type": "Date"
        },
        "_new": {
          "type": "boolean"
        },
        "__dirty": {
          "type": "Set",
          "typeParameters": [
            "string"
          ]
        },
        "__context": {
          "type": "any"
        }
      },
      "Schema": {
        "type": "object",
        "properties": {
          "context": {
            "type": "object",
            "properties": {
              "caches": {
                "description": "Get the caches linked to the context"
              },
              "_promises": {
                "type": "array",
                "items": {},
                "description": "Contain all registered promises to this context",
                "readOnly": true
              }
            },
            "required": [
              "caches"
            ],
            "description": "Context is the object that will be passed to the services"
          },
          "Events": {
            "$ref": "#/definitions/CoreModelEvents%3C%3E"
          },
          "_creationDate": {
            "type": "string",
            "format": "date-time",
            "description": "Creation date",
            "readOnly": true
          },
          "_lastUpdate": {
            "type": "string",
            "format": "date-time",
            "description": "Last update date",
            "readOnly": true
          },
          "_new": {
            "type": "boolean",
            "description": "The model is new and not saved yet\n\nIt is set by the factory method and by the create method",
            "readOnly": true
          },
          "_projects": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "type": {
                  "type": "string"
                },
                "uuid": {
                  "type": "string"
                }
              },
              "required": [
                "name",
                "type",
                "uuid"
              ],
              "additionalProperties": false
            },
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "mapString": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Test of maps for GraphQL"
          },
          "mapAny": {
            "type": "object"
          },
          "mapNumber": {
            "type": "object",
            "additionalProperties": {
              "type": "number"
            }
          },
          "mapBoolean": {
            "type": "object",
            "additionalProperties": {
              "type": "boolean"
            }
          },
          "mapObject": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {
                "test": {
                  "type": "number"
                },
                "b": {
                  "type": "boolean"
                },
                "status": {
                  "type": "string"
                }
              },
              "required": [
                "test",
                "b",
                "status"
              ]
            }
          },
          "permissions": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Permission"
            }
          }
        },
        "required": [
          "Events",
          "context",
          "name"
        ],
        "$schema": "http://json-schema.org/draft-07/schema#",
        "definitions": {
          "CoreModelEvents<>": {
            "type": "object",
            "properties": {
              "Create": {
                "type": "object",
                "properties": {
                  "object_id": {
                    "type": "string"
                  },
                  "object": {}
                },
                "required": [
                  "object_id",
                  "object"
                ]
              },
              "PartialUpdate": {},
              "Delete": {
                "type": "object",
                "properties": {
                  "object_id": {
                    "type": "string"
                  }
                },
                "required": [
                  "object_id"
                ]
              },
              "Update": {
                "type": "object",
                "properties": {
                  "object_id": {
                    "type": "string"
                  },
                  "object": {},
                  "previous": {}
                },
                "required": [
                  "object_id",
                  "object",
                  "previous"
                ]
              }
            },
            "required": [
              "Create",
              "PartialUpdate",
              "Delete",
              "Update"
            ],
            "description": "Event sent by models\n\nEvents are sent by the model to notify of changes after the changes are done\n\nIf you need to prevent the change, you should extend the object"
          },
          "Permission": {
            "type": "string",
            "enum": [
              "PRODUCT_1",
              "PRODUCT_2",
              "PRODUCT_3"
            ]
          }
        },
        "title": "Company"
      }
    },
    "WebdaDemo/Computer": {
      "Plural": "Computers",
      "Import": "lib/models/user:Computer",
      "Relations": {
        "parent": {
          "attribute": "_user",
          "model": "WebdaDemo/User"
        },
        "links": [
          {
            "attribute": "_loanTo",
            "model": "WebdaDemo/User",
            "type": "LINK"
          }
        ]
      },
      "Ancestors": [],
      "Subclasses": [],
      "Reflection": {
        "_user": {
          "type": "ModelParent",
          "typeParameters": [
            "User"
          ]
        },
        "_loanTo": {
          "type": "ModelLink",
          "typeParameters": [
            "User"
          ]
        },
        "name": {
          "type": "string"
        },
        "Events": {
          "type": "CoreModelEvents",
          "typeParameters": [
            "CoreModel"
          ]
        },
        "__class": {
          "type": "ModelDefinition<this> & {\n        Store: typeof CoreModel.Store;\n    }"
        },
        "_creationDate": {
          "type": "Date"
        },
        "_lastUpdate": {
          "type": "Date"
        },
        "_new": {
          "type": "boolean"
        },
        "__dirty": {
          "type": "Set",
          "typeParameters": [
            "string"
          ]
        },
        "__context": {
          "type": "any"
        }
      },
      "Schema": {
        "type": "object",
        "properties": {
          "context": {
            "type": "object",
            "properties": {
              "caches": {
                "description": "Get the caches linked to the context"
              },
              "_promises": {
                "type": "array",
                "items": {},
                "description": "Contain all registered promises to this context",
                "readOnly": true
              }
            },
            "required": [
              "caches"
            ],
            "description": "Context is the object that will be passed to the services"
          },
          "Events": {
            "$ref": "#/definitions/CoreModelEvents%3C%3E"
          },
          "_creationDate": {
            "type": "string",
            "format": "date-time",
            "description": "Creation date",
            "readOnly": true
          },
          "_lastUpdate": {
            "type": "string",
            "format": "date-time",
            "description": "Last update date",
            "readOnly": true
          },
          "_new": {
            "type": "boolean",
            "description": "The model is new and not saved yet\n\nIt is set by the factory method and by the create method",
            "readOnly": true
          },
          "_user": {
            "type": "string",
            "readOnly": true
          },
          "_loanTo": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "Events",
          "context",
          "name"
        ],
        "$schema": "http://json-schema.org/draft-07/schema#",
        "definitions": {
          "CoreModelEvents<>": {
            "type": "object",
            "properties": {
              "Create": {
                "type": "object",
                "properties": {
                  "object_id": {
                    "type": "string"
                  },
                  "object": {}
                },
                "required": [
                  "object_id",
                  "object"
                ]
              },
              "PartialUpdate": {},
              "Delete": {
                "type": "object",
                "properties": {
                  "object_id": {
                    "type": "string"
                  }
                },
                "required": [
                  "object_id"
                ]
              },
              "Update": {
                "type": "object",
                "properties": {
                  "object_id": {
                    "type": "string"
                  },
                  "object": {},
                  "previous": {}
                },
                "required": [
                  "object_id",
                  "object",
                  "previous"
                ]
              }
            },
            "required": [
              "Create",
              "PartialUpdate",
              "Delete",
              "Update"
            ],
            "description": "Event sent by models\n\nEvents are sent by the model to notify of changes after the changes are done\n\nIf you need to prevent the change, you should extend the object"
          }
        },
        "title": "Computer"
      }
    },
    "WebdaDemo/ComputerScreen": {
      "Plural": "ComputerScreens",
      "Import": "lib/models/relations:ComputerScreen",
      "Relations": {
        "parent": {
          "attribute": "classroom",
          "model": "WebdaDemo/Classroom"
        },
        "queries": [
          {
            "attribute": "brands",
            "model": "WebdaDemo/Brand",
            "targetAttribute": "name"
          }
        ]
      },
      "Ancestors": [
        "WebdaDemo/Hardware"
      ],
      "Subclasses": [],
      "Reflection": {
        "modelId": {
          "type": "string"
        },
        "serialNumber": {
          "type": "string"
        },
        "classroom": {
          "type": "ModelParent",
          "typeParameters": [
            "Classroom"
          ]
        },
        "name": {
          "type": "string"
        },
        "brands": {
          "type": "ModelRelated",
          "typeParameters": [
            "Brand",
            "\"name\""
          ]
        },
        "uuid": {
          "type": "string"
        },
        "Events": {
          "type": "CoreModelEvents",
          "typeParameters": [
            "CoreModel"
          ]
        },
        "__class": {
          "type": "ModelDefinition<this> & {\n        Store: typeof CoreModel.Store;\n    }"
        },
        "_creationDate": {
          "type": "Date"
        },
        "_lastUpdate": {
          "type": "Date"
        },
        "_new": {
          "type": "boolean"
        },
        "__dirty": {
          "type": "Set",
          "typeParameters": [
            "string"
          ]
        },
        "__context": {
          "type": "any"
        }
      },
      "Schema": {
        "type": "object",
        "properties": {
          "context": {
            "type": "object",
            "properties": {
              "caches": {
                "description": "Get the caches linked to the context"
              },
              "_promises": {
                "type": "array",
                "items": {},
                "description": "Contain all registered promises to this context",
                "readOnly": true
              }
            },
            "required": [
              "caches"
            ],
            "description": "Context is the object that will be passed to the services"
          },
          "Events": {
            "$ref": "#/definitions/CoreModelEvents%3C%3E"
          },
          "_creationDate": {
            "type": "string",
            "format": "date-time",
            "description": "Creation date",
            "readOnly": true
          },
          "_lastUpdate": {
            "type": "string",
            "format": "date-time",
            "description": "Last update date",
            "readOnly": true
          },
          "_new": {
            "type": "boolean",
            "description": "The model is new and not saved yet\n\nIt is set by the factory method and by the create method",
            "readOnly": true
          },
          "uuid": {
            "type": "string",
            "readOnly": true,
            "$generated": true
          },
          "classroom": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "modelId": {
            "type": "string"
          },
          "serialNumber": {
            "type": "string"
          }
        },
        "required": [
          "Events",
          "classroom",
          "context",
          "modelId",
          "name",
          "serialNumber"
        ],
        "$schema": "http://json-schema.org/draft-07/schema#",
        "definitions": {
          "CoreModelEvents<>": {
            "type": "object",
            "properties": {
              "Create": {
                "type": "object",
                "properties": {
                  "object_id": {
                    "type": "string"
                  },
                  "object": {}
                },
                "required": [
                  "object_id",
                  "object"
                ]
              },
              "PartialUpdate": {},
              "Delete": {
                "type": "object",
                "properties": {
                  "object_id": {
                    "type": "string"
                  }
                },
                "required": [
                  "object_id"
                ]
              },
              "Update": {
                "type": "object",
                "properties": {
                  "object_id": {
                    "type": "string"
                  },
                  "object": {},
                  "previous": {}
                },
                "required": [
                  "object_id",
                  "object",
                  "previous"
                ]
              }
            },
            "required": [
              "Create",
              "PartialUpdate",
              "Delete",
              "Update"
            ],
            "description": "Event sent by models\n\nEvents are sent by the model to notify of changes after the changes are done\n\nIf you need to prevent the change, you should extend the object"
          }
        },
        "title": "ComputerScreen"
      }
    },
    "WebdaDemo/Contact": {
      "Plural": "Contacts",
      "Import": "lib/models/contact:default",
      "Relations": {
        "binaries": [
          {
            "attribute": "avatar",
            "cardinality": "ONE"
          },
          {
            "attribute": "photos",
            "cardinality": "MANY"
          }
        ],
        "links": [
          {
            "attribute": "owner",
            "model": "WebdaDemo/User",
            "type": "LINK"
          }
        ]
      },
      "Ancestors": [],
      "Subclasses": [],
      "Reflection": {
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "type": {
          "type": "\"PERSONAL\" | \"PROFESSIONAL\""
        },
        "age": {
          "type": "number"
        },
        "custom": {
          "type": "string"
        },
        "readonly": {
          "type": "number"
        },
        "optional": {
          "type": "string"
        },
        "avatar": {
          "type": "Binary"
        },
        "photos": {
          "type": "Binaries",
          "typeParameters": [
            "{ location: { lat: number; lng: number; }; }"
          ]
        },
        "owner": {
          "type": "ModelLink",
          "typeParameters": [
            "User"
          ]
        },
        "Events": {
          "type": "CoreModelEvents",
          "typeParameters": [
            "CoreModel"
          ]
        },
        "__class": {
          "type": "ModelDefinition<this> & {\n        Store: typeof CoreModel.Store;\n    }"
        },
        "_creationDate": {
          "type": "Date"
        },
        "_lastUpdate": {
          "type": "Date"
        },
        "_new": {
          "type": "boolean"
        },
        "__dirty": {
          "type": "Set",
          "typeParameters": [
            "string"
          ]
        },
        "__context": {
          "type": "any"
        }
      },
      "Schema": {
        "type": "object",
        "properties": {
          "context": {
            "type": "object",
            "properties": {
              "caches": {
                "description": "Get the caches linked to the context"
              },
              "_promises": {
                "type": "array",
                "items": {},
                "description": "Contain all registered promises to this context",
                "readOnly": true
              }
            },
            "required": [
              "caches"
            ],
            "description": "Context is the object that will be passed to the services"
          },
          "Events": {
            "$ref": "#/definitions/CoreModelEvents%3C%3E"
          },
          "_creationDate": {
            "type": "string",
            "format": "date-time",
            "description": "Creation date",
            "readOnly": true
          },
          "_lastUpdate": {
            "type": "string",
            "format": "date-time",
            "description": "Last update date",
            "readOnly": true
          },
          "_new": {
            "type": "boolean",
            "description": "The model is new and not saved yet\n\nIt is set by the factory method and by the create method",
            "readOnly": true
          },
          "firstName": {
            "type": "string",
            "description": "Contact firstname"
          },
          "lastName": {
            "type": "string",
            "description": "Contact lastname"
          },
          "type": {
            "type": "string",
            "enum": [
              "PERSONAL",
              "PROFESSIONAL"
            ],
            "description": "Contact type"
          },
          "age": {
            "type": "number",
            "description": "Contact age",
            "minimum": 0
          },
          "readonly": {
            "type": "number",
            "description": "To indicate a property that will be set by server, similar to",
            "readOnly": true
          },
          "optional": {
            "type": "string",
            "description": "Useful to auto complete on the creation side without forcing UI to push the attribute"
          },
          "avatar": {
            "type": "object",
            "readOnly": true
          },
          "photos": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "location": {
                  "type": "object",
                  "properties": {
                    "lat": {
                      "type": "number"
                    },
                    "lng": {
                      "type": "number"
                    }
                  },
                  "required": [
                    "lat",
                    "lng"
                  ]
                }
              },
              "required": [
                "location"
              ]
            },
            "readOnly": true
          },
          "owner": {
            "type": "string"
          }
        },
        "required": [
          "Events",
          "age",
          "context",
          "firstName",
          "lastName",
          "owner",
          "type"
        ],
        "$schema": "http://json-schema.org/draft-07/schema#",
        "definitions": {
          "CoreModelEvents<>": {
            "type": "object",
            "properties": {
              "Create": {
                "type": "object",
                "properties": {
                  "object_id": {
                    "type": "string"
                  },
                  "object": {}
                },
                "required": [
                  "object_id",
                  "object"
                ]
              },
              "PartialUpdate": {},
              "Delete": {
                "type": "object",
                "properties": {
                  "object_id": {
                    "type": "string"
                  }
                },
                "required": [
                  "object_id"
                ]
              },
              "Update": {
                "type": "object",
                "properties": {
                  "object_id": {
                    "type": "string"
                  },
                  "object": {},
                  "previous": {}
                },
                "required": [
                  "object_id",
                  "object",
                  "previous"
                ]
              }
            },
            "required": [
              "Create",
              "PartialUpdate",
              "Delete",
              "Update"
            ],
            "description": "Event sent by models\n\nEvents are sent by the model to notify of changes after the changes are done\n\nIf you need to prevent the change, you should extend the object"
          }
        },
        "title": "Contact"
      }
    },
    "WebdaDemo/Course": {
      "Plural": "Courses",
      "Import": "lib/models/relations:Course",
      "Relations": {
        "links": [
          {
            "attribute": "classroom",
            "model": "WebdaDemo/Classroom",
            "type": "LINK"
          },
          {
            "attribute": "teacher",
            "model": "WebdaDemo/Teacher",
            "type": "LINK"
          },
          {
            "attribute": "students",
            "model": "WebdaDemo/Student",
            "type": "LINKS_MAP"
          }
        ]
      },
      "Ancestors": [],
      "Subclasses": [],
      "Reflection": {
        "uuid": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "classroom": {
          "type": "ModelLink",
          "typeParameters": [
            "Classroom"
          ]
        },
        "teacher": {
          "type": "ModelLink",
          "typeParameters": [
            "Teacher"
          ]
        },
        "students": {
          "type": "ModelLinksMap",
          "typeParameters": [
            "Student",
            "{ firstName: string; lastName?: string; }"
          ]
        },
        "Events": {
          "type": "CoreModelEvents",
          "typeParameters": [
            "CoreModel"
          ]
        },
        "__class": {
          "type": "ModelDefinition<this> & {\n        Store: typeof CoreModel.Store;\n    }"
        },
        "_creationDate": {
          "type": "Date"
        },
        "_lastUpdate": {
          "type": "Date"
        },
        "_new": {
          "type": "boolean"
        },
        "__dirty": {
          "type": "Set",
          "typeParameters": [
            "string"
          ]
        },
        "__context": {
          "type": "any"
        }
      },
      "Schema": {
        "type": "object",
        "properties": {
          "context": {
            "type": "object",
            "properties": {
              "caches": {
                "description": "Get the caches linked to the context"
              },
              "_promises": {
                "type": "array",
                "items": {},
                "description": "Contain all registered promises to this context",
                "readOnly": true
              }
            },
            "required": [
              "caches"
            ],
            "description": "Context is the object that will be passed to the services"
          },
          "Events": {
            "$ref": "#/definitions/CoreModelEvents%3C%3E"
          },
          "_creationDate": {
            "type": "string",
            "format": "date-time",
            "description": "Creation date",
            "readOnly": true
          },
          "_lastUpdate": {
            "type": "string",
            "format": "date-time",
            "description": "Last update date",
            "readOnly": true
          },
          "_new": {
            "type": "boolean",
            "description": "The model is new and not saved yet\n\nIt is set by the factory method and by the create method",
            "readOnly": true
          },
          "uuid": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "classroom": {
            "type": "string"
          },
          "teacher": {
            "type": "string"
          },
          "students": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {
                "firstName": {
                  "type": "string"
                },
                "lastName": {
                  "type": "string"
                },
                "uuid": {
                  "type": "string"
                }
              },
              "required": [
                "firstName",
                "uuid"
              ]
            }
          }
        },
        "required": [
          "Events",
          "classroom",
          "context",
          "name",
          "students",
          "teacher",
          "uuid"
        ],
        "$schema": "http://json-schema.org/draft-07/schema#",
        "definitions": {
          "CoreModelEvents<>": {
            "type": "object",
            "properties": {
              "Create": {
                "type": "object",
                "properties": {
                  "object_id": {
                    "type": "string"
                  },
                  "object": {}
                },
                "required": [
                  "object_id",
                  "object"
                ]
              },
              "PartialUpdate": {},
              "Delete": {
                "type": "object",
                "properties": {
                  "object_id": {
                    "type": "string"
                  }
                },
                "required": [
                  "object_id"
                ]
              },
              "Update": {
                "type": "object",
                "properties": {
                  "object_id": {
                    "type": "string"
                  },
                  "object": {},
                  "previous": {}
                },
                "required": [
                  "object_id",
                  "object",
                  "previous"
                ]
              }
            },
            "required": [
              "Create",
              "PartialUpdate",
              "Delete",
              "Update"
            ],
            "description": "Event sent by models\n\nEvents are sent by the model to notify of changes after the changes are done\n\nIf you need to prevent the change, you should extend the object"
          }
        },
        "title": "Course"
      }
    },
    "WebdaDemo/Hardware": {
      "Plural": "Hardwares",
      "Import": "lib/models/relations:Hardware",
      "Relations": {
        "parent": {
          "attribute": "classroom",
          "model": "WebdaDemo/Classroom"
        },
        "queries": [
          {
            "attribute": "brands",
            "model": "WebdaDemo/Brand",
            "targetAttribute": "name"
          }
        ]
      },
      "Ancestors": [],
      "Subclasses": [
        "WebdaDemo/ComputerScreen"
      ],
      "Reflection": {
        "classroom": {
          "type": "ModelParent",
          "typeParameters": [
            "Classroom"
          ]
        },
        "name": {
          "type": "string"
        },
        "brands": {
          "type": "ModelRelated",
          "typeParameters": [
            "Brand",
            "\"name\""
          ]
        },
        "uuid": {
          "type": "string"
        },
        "Events": {
          "type": "CoreModelEvents",
          "typeParameters": [
            "CoreModel"
          ]
        },
        "__class": {
          "type": "ModelDefinition<this> & {\n        Store: typeof CoreModel.Store;\n    }"
        },
        "_creationDate": {
          "type": "Date"
        },
        "_lastUpdate": {
          "type": "Date"
        },
        "_new": {
          "type": "boolean"
        },
        "__dirty": {
          "type": "Set",
          "typeParameters": [
            "string"
          ]
        },
        "__context": {
          "type": "any"
        }
      },
      "Schema": {
        "type": "object",
        "properties": {
          "context": {
            "type": "object",
            "properties": {
              "caches": {
                "description": "Get the caches linked to the context"
              },
              "_promises": {
                "type": "array",
                "items": {},
                "description": "Contain all registered promises to this context",
                "readOnly": true
              }
            },
            "required": [
              "caches"
            ],
            "description": "Context is the object that will be passed to the services"
          },
          "Events": {
            "$ref": "#/definitions/CoreModelEvents%3C%3E"
          },
          "_creationDate": {
            "type": "string",
            "format": "date-time",
            "description": "Creation date",
            "readOnly": true
          },
          "_lastUpdate": {
            "type": "string",
            "format": "date-time",
            "description": "Last update date",
            "readOnly": true
          },
          "_new": {
            "type": "boolean",
            "description": "The model is new and not saved yet\n\nIt is set by the factory method and by the create method",
            "readOnly": true
          },
          "uuid": {
            "type": "string",
            "readOnly": true,
            "$generated": true
          },
          "classroom": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "Events",
          "classroom",
          "context",
          "name"
        ],
        "$schema": "http://json-schema.org/draft-07/schema#",
        "definitions": {
          "CoreModelEvents<>": {
            "type": "object",
            "properties": {
              "Create": {
                "type": "object",
                "properties": {
                  "object_id": {
                    "type": "string"
                  },
                  "object": {}
                },
                "required": [
                  "object_id",
                  "object"
                ]
              },
              "PartialUpdate": {},
              "Delete": {
                "type": "object",
                "properties": {
                  "object_id": {
                    "type": "string"
                  }
                },
                "required": [
                  "object_id"
                ]
              },
              "Update": {
                "type": "object",
                "properties": {
                  "object_id": {
                    "type": "string"
                  },
                  "object": {},
                  "previous": {}
                },
                "required": [
                  "object_id",
                  "object",
                  "previous"
                ]
              }
            },
            "required": [
              "Create",
              "PartialUpdate",
              "Delete",
              "Update"
            ],
            "description": "Event sent by models\n\nEvents are sent by the model to notify of changes after the changes are done\n\nIf you need to prevent the change, you should extend the object"
          }
        },
        "title": "Hardware"
      }
    },
    "WebdaDemo/Project": {
      "Plural": "Projects",
      "Import": "lib/models/project:Project",
      "Relations": {
        "parent": {
          "attribute": "_company",
          "model": "WebdaDemo/Company"
        }
      },
      "Ancestors": [
        "WebdaDemo/AbstractProject"
      ],
      "Subclasses": [
        "WebdaDemo/SubProject",
        "WebdaDemo/AnotherSubProject"
      ],
      "Reflection": {
        "_company": {
          "type": "ModelParent",
          "typeParameters": [
            "Company"
          ]
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "uuid": {
          "type": "string"
        },
        "n": {
          "type": "number"
        },
        "test2": {
          "type": "string"
        },
        "protectMe": {
          "type": "{\n    /**\n     * Some doc\n     */\n    test: string;\n    /**\n     * Other doc\n     */\n    n: number;\n  }"
        },
        "_creator": {
          "type": "string"
        },
        "__acl": {
          "type": "Acl"
        },
        "_permissions": {
          "type": "Array",
          "typeParameters": [
            "string"
          ]
        },
        "test": {
          "type": "Date"
        },
        "Events": {
          "type": "CoreModelEvents",
          "typeParameters": [
            "CoreModel"
          ]
        },
        "__class": {
          "type": "ModelDefinition<this> & {\n        Store: typeof CoreModel.Store;\n    }"
        },
        "_creationDate": {
          "type": "Date"
        },
        "_lastUpdate": {
          "type": "Date"
        },
        "_new": {
          "type": "boolean"
        },
        "__dirty": {
          "type": "Set",
          "typeParameters": [
            "string"
          ]
        },
        "__context": {
          "type": "any"
        }
      },
      "Schema": {
        "type": "object",
        "properties": {
          "n": {
            "type": "number"
          },
          "test2": {
            "type": "string"
          },
          "context": {
            "type": "object",
            "properties": {
              "caches": {
                "description": "Get the caches linked to the context"
              },
              "_promises": {
                "type": "array",
                "items": {},
                "description": "Contain all registered promises to this context",
                "readOnly": true
              }
            },
            "required": [
              "caches"
            ],
            "description": "Context is the object that will be passed to the services"
          },
          "Events": {
            "$ref": "#/definitions/CoreModelEvents%3C%3E"
          },
          "_creationDate": {
            "type": "string",
            "format": "date-time",
            "description": "Creation date",
            "readOnly": true
          },
          "_lastUpdate": {
            "type": "string",
            "format": "date-time",
            "description": "Last update date",
            "readOnly": true
          },
          "_new": {
            "type": "boolean",
            "description": "The model is new and not saved yet\n\nIt is set by the factory method and by the create method",
            "readOnly": true
          },
          "_creator": {
            "type": "string",
            "description": "Object creator",
            "readOnly": true
          },
          "_company": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "uuid": {
            "type": "string"
          }
        },
        "required": [
          "Events",
          "context",
          "n",
          "name",
          "test2",
          "type",
          "uuid"
        ],
        "$schema": "http://json-schema.org/draft-07/schema#",
        "definitions": {
          "CoreModelEvents<>": {
            "type": "object",
            "properties": {
              "Create": {
                "type": "object",
                "properties": {
                  "object_id": {
                    "type": "string"
                  },
                  "object": {}
                },
                "required": [
                  "object_id",
                  "object"
                ]
              },
              "PartialUpdate": {},
              "Delete": {
                "type": "object",
                "properties": {
                  "object_id": {
                    "type": "string"
                  }
                },
                "required": [
                  "object_id"
                ]
              },
              "Update": {
                "type": "object",
                "properties": {
                  "object_id": {
                    "type": "string"
                  },
                  "object": {},
                  "previous": {}
                },
                "required": [
                  "object_id",
                  "object",
                  "previous"
                ]
              }
            },
            "required": [
              "Create",
              "PartialUpdate",
              "Delete",
              "Update"
            ],
            "description": "Event sent by models\n\nEvents are sent by the model to notify of changes after the changes are done\n\nIf you need to prevent the change, you should extend the object"
          }
        },
        "title": "Project"
      }
    },
    "WebdaDemo/Student": {
      "Plural": "Students",
      "Import": "lib/models/relations:Student",
      "Relations": {
        "links": [
          {
            "attribute": "friends",
            "model": "WebdaDemo/Student",
            "type": "LINKS_ARRAY"
          },
          {
            "attribute": "teachers",
            "model": "WebdaDemo/Teacher",
            "type": "LINKS_SIMPLE_ARRAY"
          }
        ],
        "maps": [
          {
            "attribute": "courses",
            "cascadeDelete": false,
            "model": "WebdaDemo/Course",
            "targetLink": "students",
            "targetAttributes": [
              "name",
              "uuid"
            ]
          }
        ]
      },
      "Ancestors": [],
      "Subclasses": [],
      "Reflection": {
        "email": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "order": {
          "type": "number"
        },
        "friends": {
          "type": "ModelLinksArray",
          "typeParameters": [
            "Student",
            "{ email: string; firstName: string; lastName: string; }"
          ]
        },
        "teachers": {
          "type": "ModelLinksSimpleArray",
          "typeParameters": [
            "Teacher"
          ]
        },
        "courses": {
          "type": "ModelsMapped",
          "typeParameters": [
            "Course",
            "\"students\"",
            "\"name\""
          ]
        },
        "constraints": {
          "type": "null"
        },
        "uuid": {
          "type": "string"
        },
        "Events": {
          "type": "CoreModelEvents",
          "typeParameters": [
            "CoreModel"
          ]
        },
        "__class": {
          "type": "ModelDefinition<this> & {\n        Store: typeof CoreModel.Store;\n    }"
        },
        "_creationDate": {
          "type": "Date"
        },
        "_lastUpdate": {
          "type": "Date"
        },
        "_new": {
          "type": "boolean"
        },
        "__dirty": {
          "type": "Set",
          "typeParameters": [
            "string"
          ]
        },
        "__context": {
          "type": "any"
        }
      },
      "Schema": {
        "type": "object",
        "properties": {
          "context": {
            "type": "object",
            "properties": {
              "caches": {
                "description": "Get the caches linked to the context"
              },
              "_promises": {
                "type": "array",
                "items": {},
                "description": "Contain all registered promises to this context",
                "readOnly": true
              }
            },
            "required": [
              "caches"
            ],
            "description": "Context is the object that will be passed to the services"
          },
          "Events": {
            "$ref": "#/definitions/CoreModelEvents%3C%3E"
          },
          "_creationDate": {
            "type": "string",
            "format": "date-time",
            "description": "Creation date",
            "readOnly": true
          },
          "_lastUpdate": {
            "type": "string",
            "format": "date-time",
            "description": "Last update date",
            "readOnly": true
          },
          "_new": {
            "type": "boolean",
            "description": "The model is new and not saved yet\n\nIt is set by the factory method and by the create method",
            "readOnly": true
          },
          "uuid": {
            "type": "string",
            "readOnly": true,
            "$generated": true
          },
          "email": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "order": {
            "type": "number"
          },
          "friends": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string"
                },
                "firstName": {
                  "type": "string"
                },
                "lastName": {
                  "type": "string"
                },
                "uuid": {
                  "type": "string"
                }
              },
              "required": [
                "email",
                "firstName",
                "lastName",
                "uuid"
              ]
            }
          },
          "teachers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "courses": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "uuid": {
                  "type": "string"
                }
              },
              "required": [
                "name",
                "uuid"
              ],
              "additionalProperties": false
            },
            "readOnly": true
          },
          "constraints": {
            "type": "null"
          }
        },
        "required": [
          "Events",
          "constraints",
          "context",
          "email",
          "firstName",
          "friends",
          "lastName",
          "order",
          "teachers"
        ],
        "$schema": "http://json-schema.org/draft-07/schema#",
        "definitions": {
          "CoreModelEvents<>": {
            "type": "object",
            "properties": {
              "Create": {
                "type": "object",
                "properties": {
                  "object_id": {
                    "type": "string"
                  },
                  "object": {}
                },
                "required": [
                  "object_id",
                  "object"
                ]
              },
              "PartialUpdate": {},
              "Delete": {
                "type": "object",
                "properties": {
                  "object_id": {
                    "type": "string"
                  }
                },
                "required": [
                  "object_id"
                ]
              },
              "Update": {
                "type": "object",
                "properties": {
                  "object_id": {
                    "type": "string"
                  },
                  "object": {},
                  "previous": {}
                },
                "required": [
                  "object_id",
                  "object",
                  "previous"
                ]
              }
            },
            "required": [
              "Create",
              "PartialUpdate",
              "Delete",
              "Update"
            ],
            "description": "Event sent by models\n\nEvents are sent by the model to notify of changes after the changes are done\n\nIf you need to prevent the change, you should extend the object"
          }
        },
        "title": "Student"
      }
    },
    "WebdaDemo/SubProject": {
      "Plural": "SubProjects",
      "Import": "lib/models/project:SubProject",
      "Relations": {
        "parent": {
          "attribute": "_company",
          "model": "WebdaDemo/Company"
        }
      },
      "Ancestors": [
        "WebdaDemo/Project",
        "WebdaDemo/AbstractProject"
      ],
      "Subclasses": [],
      "Reflection": {
        "_company": {
          "type": "ModelParent",
          "typeParameters": [
            "Company"
          ]
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "uuid": {
          "type": "string"
        },
        "n": {
          "type": "number"
        },
        "test2": {
          "type": "string"
        },
        "protectMe": {
          "type": "{\n    /**\n     * Some doc\n     */\n    test: string;\n    /**\n     * Other doc\n     */\n    n: number;\n  }"
        },
        "_creator": {
          "type": "string"
        },
        "__acl": {
          "type": "Acl"
        },
        "_permissions": {
          "type": "Array",
          "typeParameters": [
            "string"
          ]
        },
        "test": {
          "type": "Date"
        },
        "Events": {
          "type": "CoreModelEvents",
          "typeParameters": [
            "CoreModel"
          ]
        },
        "__class": {
          "type": "ModelDefinition<this> & {\n        Store: typeof CoreModel.Store;\n    }"
        },
        "_creationDate": {
          "type": "Date"
        },
        "_lastUpdate": {
          "type": "Date"
        },
        "_new": {
          "type": "boolean"
        },
        "__dirty": {
          "type": "Set",
          "typeParameters": [
            "string"
          ]
        },
        "__context": {
          "type": "any"
        }
      },
      "Schema": {
        "type": "object",
        "properties": {
          "n": {
            "type": "number"
          },
          "test2": {
            "type": "string"
          },
          "context": {
            "type": "object",
            "properties": {
              "caches": {
                "description": "Get the caches linked to the context"
              },
              "_promises": {
                "type": "array",
                "items": {},
                "description": "Contain all registered promises to this context",
                "readOnly": true
              }
            },
            "required": [
              "caches"
            ],
            "description": "Context is the object that will be passed to the services"
          },
          "Events": {
            "$ref": "#/definitions/CoreModelEvents%3C%3E"
          },
          "_creationDate": {
            "type": "string",
            "format": "date-time",
            "description": "Creation date",
            "readOnly": true
          },
          "_lastUpdate": {
            "type": "string",
            "format": "date-time",
            "description": "Last update date",
            "readOnly": true
          },
          "_new": {
            "type": "boolean",
            "description": "The model is new and not saved yet\n\nIt is set by the factory method and by the create method",
            "readOnly": true
          },
          "_creator": {
            "type": "string",
            "description": "Object creator",
            "readOnly": true
          },
          "_company": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "uuid": {
            "type": "string"
          }
        },
        "required": [
          "Events",
          "context",
          "n",
          "name",
          "test2",
          "type",
          "uuid"
        ],
        "$schema": "http://json-schema.org/draft-07/schema#",
        "definitions": {
          "CoreModelEvents<>": {
            "type": "object",
            "properties": {
              "Create": {
                "type": "object",
                "properties": {
                  "object_id": {
                    "type": "string"
                  },
                  "object": {}
                },
                "required": [
                  "object_id",
                  "object"
                ]
              },
              "PartialUpdate": {},
              "Delete": {
                "type": "object",
                "properties": {
                  "object_id": {
                    "type": "string"
                  }
                },
                "required": [
                  "object_id"
                ]
              },
              "Update": {
                "type": "object",
                "properties": {
                  "object_id": {
                    "type": "string"
                  },
                  "object": {},
                  "previous": {}
                },
                "required": [
                  "object_id",
                  "object",
                  "previous"
                ]
              }
            },
            "required": [
              "Create",
              "PartialUpdate",
              "Delete",
              "Update"
            ],
            "description": "Event sent by models\n\nEvents are sent by the model to notify of changes after the changes are done\n\nIf you need to prevent the change, you should extend the object"
          }
        },
        "title": "SubProject"
      }
    },
    "WebdaDemo/SubSubProject": {
      "Plural": "SubSubProjects",
      "Import": "lib/models/project:SubSubProject",
      "Relations": {
        "parent": {
          "attribute": "_company",
          "model": "WebdaDemo/Company"
        }
      },
      "Ancestors": [
        "WebdaDemo/AnotherSubProject",
        "WebdaDemo/Project",
        "WebdaDemo/AbstractProject"
      ],
      "Subclasses": [],
      "Reflection": {
        "attribute1": {
          "type": "string"
        },
        "_company": {
          "type": "ModelParent",
          "typeParameters": [
            "Company"
          ]
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "uuid": {
          "type": "string"
        },
        "n": {
          "type": "number"
        },
        "test2": {
          "type": "string"
        },
        "protectMe": {
          "type": "{\n    /**\n     * Some doc\n     */\n    test: string;\n    /**\n     * Other doc\n     */\n    n: number;\n  }"
        },
        "_creator": {
          "type": "string"
        },
        "__acl": {
          "type": "Acl"
        },
        "_permissions": {
          "type": "Array",
          "typeParameters": [
            "string"
          ]
        },
        "test": {
          "type": "Date"
        },
        "Events": {
          "type": "CoreModelEvents",
          "typeParameters": [
            "CoreModel"
          ]
        },
        "__class": {
          "type": "ModelDefinition<this> & {\n        Store: typeof CoreModel.Store;\n    }"
        },
        "_creationDate": {
          "type": "Date"
        },
        "_lastUpdate": {
          "type": "Date"
        },
        "_new": {
          "type": "boolean"
        },
        "__dirty": {
          "type": "Set",
          "typeParameters": [
            "string"
          ]
        },
        "__context": {
          "type": "any"
        }
      },
      "Schema": {
        "type": "object",
        "properties": {
          "n": {
            "type": "number"
          },
          "test2": {
            "type": "string"
          },
          "context": {
            "type": "object",
            "properties": {
              "caches": {
                "description": "Get the caches linked to the context"
              },
              "_promises": {
                "type": "array",
                "items": {},
                "description": "Contain all registered promises to this context",
                "readOnly": true
              }
            },
            "required": [
              "caches"
            ],
            "description": "Context is the object that will be passed to the services"
          },
          "Events": {
            "$ref": "#/definitions/CoreModelEvents%3C%3E"
          },
          "_creationDate": {
            "type": "string",
            "format": "date-time",
            "description": "Creation date",
            "readOnly": true
          },
          "_lastUpdate": {
            "type": "string",
            "format": "date-time",
            "description": "Last update date",
            "readOnly": true
          },
          "_new": {
            "type": "boolean",
            "description": "The model is new and not saved yet\n\nIt is set by the factory method and by the create method",
            "readOnly": true
          },
          "_creator": {
            "type": "string",
            "description": "Object creator",
            "readOnly": true
          },
          "_company": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "uuid": {
            "type": "string"
          },
          "attribute1": {
            "type": "string"
          }
        },
        "required": [
          "Events",
          "attribute1",
          "context",
          "n",
          "name",
          "test2",
          "type",
          "uuid"
        ],
        "$schema": "http://json-schema.org/draft-07/schema#",
        "definitions": {
          "CoreModelEvents<>": {
            "type": "object",
            "properties": {
              "Create": {
                "type": "object",
                "properties": {
                  "object_id": {
                    "type": "string"
                  },
                  "object": {}
                },
                "required": [
                  "object_id",
                  "object"
                ]
              },
              "PartialUpdate": {},
              "Delete": {
                "type": "object",
                "properties": {
                  "object_id": {
                    "type": "string"
                  }
                },
                "required": [
                  "object_id"
                ]
              },
              "Update": {
                "type": "object",
                "properties": {
                  "object_id": {
                    "type": "string"
                  },
                  "object": {},
                  "previous": {}
                },
                "required": [
                  "object_id",
                  "object",
                  "previous"
                ]
              }
            },
            "required": [
              "Create",
              "PartialUpdate",
              "Delete",
              "Update"
            ],
            "description": "Event sent by models\n\nEvents are sent by the model to notify of changes after the changes are done\n\nIf you need to prevent the change, you should extend the object"
          }
        },
        "title": "SubSubProject"
      }
    },
    "WebdaDemo/Teacher": {
      "Plural": "Teachers",
      "Import": "lib/models/relations:Teacher",
      "Relations": {
        "maps": [
          {
            "attribute": "courses",
            "cascadeDelete": false,
            "model": "WebdaDemo/Course",
            "targetLink": "teacher",
            "targetAttributes": [
              "name",
              "uuid"
            ]
          },
          {
            "attribute": "students",
            "cascadeDelete": false,
            "model": "WebdaDemo/Student",
            "targetLink": "teachers",
            "targetAttributes": [
              "firstName",
              "lastName",
              "email",
              "uuid"
            ]
          }
        ]
      },
      "Ancestors": [],
      "Subclasses": [],
      "Reflection": {
        "uuid": {
          "type": "string"
        },
        "courses": {
          "type": "ModelsMapped",
          "typeParameters": [
            "Course",
            "\"teacher\"",
            "\"name\""
          ]
        },
        "students": {
          "type": "ModelsMapped",
          "typeParameters": [
            "Student",
            "\"teachers\"",
            "\"email\" | \"firstName\" | \"lastName\""
          ]
        },
        "name": {
          "type": "string"
        },
        "senior": {
          "type": "boolean"
        },
        "anyArray": {
          "type": "Array",
          "typeParameters": [
            "any"
          ]
        },
        "Events": {
          "type": "CoreModelEvents",
          "typeParameters": [
            "CoreModel"
          ]
        },
        "__class": {
          "type": "ModelDefinition<this> & {\n        Store: typeof CoreModel.Store;\n    }"
        },
        "_creationDate": {
          "type": "Date"
        },
        "_lastUpdate": {
          "type": "Date"
        },
        "_new": {
          "type": "boolean"
        },
        "__dirty": {
          "type": "Set",
          "typeParameters": [
            "string"
          ]
        },
        "__context": {
          "type": "any"
        }
      },
      "Schema": {
        "type": "object",
        "properties": {
          "context": {
            "type": "object",
            "properties": {
              "caches": {
                "description": "Get the caches linked to the context"
              },
              "_promises": {
                "type": "array",
                "items": {},
                "description": "Contain all registered promises to this context",
                "readOnly": true
              }
            },
            "required": [
              "caches"
            ],
            "description": "Context is the object that will be passed to the services"
          },
          "Events": {
            "$ref": "#/definitions/CoreModelEvents%3C%3E"
          },
          "_creationDate": {
            "type": "string",
            "format": "date-time",
            "description": "Creation date",
            "readOnly": true
          },
          "_lastUpdate": {
            "type": "string",
            "format": "date-time",
            "description": "Last update date",
            "readOnly": true
          },
          "_new": {
            "type": "boolean",
            "description": "The model is new and not saved yet\n\nIt is set by the factory method and by the create method",
            "readOnly": true
          },
          "uuid": {
            "type": "string"
          },
          "courses": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "uuid": {
                  "type": "string"
                }
              },
              "required": [
                "name",
                "uuid"
              ],
              "additionalProperties": false
            },
            "readOnly": true
          },
          "students": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string"
                },
                "firstName": {
                  "type": "string"
                },
                "lastName": {
                  "type": "string"
                },
                "uuid": {
                  "type": "string"
                }
              },
              "required": [
                "email",
                "firstName",
                "lastName",
                "uuid"
              ],
              "additionalProperties": false
            },
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "senior": {
            "type": "boolean"
          },
          "anyArray": {
            "type": "array",
            "items": {},
            "description": "Test that graphql can handle any[]"
          }
        },
        "required": [
          "Events",
          "anyArray",
          "context",
          "name",
          "senior",
          "uuid"
        ],
        "$schema": "http://json-schema.org/draft-07/schema#",
        "definitions": {
          "CoreModelEvents<>": {
            "type": "object",
            "properties": {
              "Create": {
                "type": "object",
                "properties": {
                  "object_id": {
                    "type": "string"
                  },
                  "object": {}
                },
                "required": [
                  "object_id",
                  "object"
                ]
              },
              "PartialUpdate": {},
              "Delete": {
                "type": "object",
                "properties": {
                  "object_id": {
                    "type": "string"
                  }
                },
                "required": [
                  "object_id"
                ]
              },
              "Update": {
                "type": "object",
                "properties": {
                  "object_id": {
                    "type": "string"
                  },
                  "object": {},
                  "previous": {}
                },
                "required": [
                  "object_id",
                  "object",
                  "previous"
                ]
              }
            },
            "required": [
              "Create",
              "PartialUpdate",
              "Delete",
              "Update"
            ],
            "description": "Event sent by models\n\nEvents are sent by the model to notify of changes after the changes are done\n\nIf you need to prevent the change, you should extend the object"
          }
        },
        "title": "Teacher"
      }
    },
    "WebdaDemo/User": {
      "Plural": "Users",
      "Import": "lib/models/user:User",
      "Relations": {
        "parent": {
          "attribute": "_company",
          "model": "WebdaDemo/Company"
        },
        "binaries": [
          {
            "attribute": "profilePicture",
            "cardinality": "ONE"
          },
          {
            "attribute": "images",
            "cardinality": "MANY"
          }
        ],
        "queries": [
          {
            "attribute": "computers",
            "model": "WebdaDemo/Computer",
            "targetAttribute": "_user"
          }
        ],
        "maps": [
          {
            "attribute": "contacts",
            "cascadeDelete": false,
            "model": "WebdaDemo/Contact",
            "targetLink": "owner",
            "targetAttributes": [
              "firstName",
              "lastName",
              "age",
              "uuid"
            ]
          }
        ]
      },
      "Ancestors": [],
      "Subclasses": [],
      "Reflection": {
        "_company": {
          "type": "ModelParent",
          "typeParameters": [
            "Company"
          ]
        },
        "name": {
          "type": "string"
        },
        "profilePicture": {
          "type": "Binary",
          "typeParameters": [
            "{ width: number; height: number; }"
          ]
        },
        "images": {
          "type": "Binaries"
        },
        "computers": {
          "type": "ModelRelated",
          "typeParameters": [
            "Computer",
            "\"_user\""
          ]
        },
        "contacts": {
          "type": "ModelsMapped",
          "typeParameters": [
            "Contact",
            "\"owner\"",
            "\"firstName\" | \"lastName\" | \"age\""
          ]
        },
        "Events": {
          "type": "UserEvents",
          "typeParameters": [
            "User"
          ]
        },
        "__password": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "_lastPasswordRecovery": {
          "type": "number"
        },
        "_avatar": {
          "type": "string"
        },
        "locale": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "__class": {
          "type": "ModelDefinition<this> & {\n        Store: typeof CoreModel.Store;\n    }"
        },
        "_creationDate": {
          "type": "Date"
        },
        "_lastUpdate": {
          "type": "Date"
        },
        "_new": {
          "type": "boolean"
        },
        "__dirty": {
          "type": "Set",
          "typeParameters": [
            "string"
          ]
        },
        "__context": {
          "type": "any"
        }
      },
      "Schema": {
        "type": "object",
        "properties": {
          "context": {
            "type": "object",
            "properties": {
              "caches": {
                "description": "Get the caches linked to the context"
              },
              "_promises": {
                "type": "array",
                "items": {},
                "description": "Contain all registered promises to this context",
                "readOnly": true
              }
            },
            "required": [
              "caches"
            ],
            "description": "Context is the object that will be passed to the services"
          },
          "Events": {
            "$ref": "#/definitions/UserEvents%3C%3E"
          },
          "_creationDate": {
            "type": "string",
            "format": "date-time",
            "description": "Creation date",
            "readOnly": true
          },
          "_lastUpdate": {
            "type": "string",
            "format": "date-time",
            "description": "Last update date",
            "readOnly": true
          },
          "_new": {
            "type": "boolean",
            "description": "The model is new and not saved yet\n\nIt is set by the factory method and by the create method",
            "readOnly": true
          },
          "displayName": {
            "type": "string",
            "description": "Display name for this user"
          },
          "_lastPasswordRecovery": {
            "type": "number",
            "description": "Last time the password was recovered",
            "readOnly": true
          },
          "_avatar": {
            "type": "string",
            "description": "Define the user avatar if exists",
            "readOnly": true
          },
          "locale": {
            "type": "string",
            "description": "Contains the locale of the user if known"
          },
          "email": {
            "type": "string",
            "description": "Contain main user email if exists"
          },
          "_company": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "profilePicture": {
            "type": "object",
            "properties": {
              "width": {
                "type": "number"
              },
              "height": {
                "type": "number"
              }
            },
            "required": [
              "width",
              "height"
            ],
            "readOnly": true
          },
          "images": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "readOnly": true
          },
          "contacts": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "firstName": {
                  "type": "string",
                  "description": "Contact firstname"
                },
                "lastName": {
                  "type": "string",
                  "description": "Contact lastname"
                },
                "age": {
                  "type": "number",
                  "description": "Contact age",
                  "minimum": 0
                },
                "uuid": {
                  "type": "string"
                }
              },
              "required": [
                "firstName",
                "lastName",
                "age",
                "uuid"
              ],
              "additionalProperties": false
            },
            "readOnly": true
          }
        },
        "required": [
          "Events",
          "context",
          "displayName",
          "name"
        ],
        "$schema": "http://json-schema.org/draft-07/schema#",
        "definitions": {
          "UserEvents<>": {
            "type": "object",
            "properties": {
              "Login": {
                "type": "object",
                "properties": {
                  "user": {}
                },
                "required": [
                  "user"
                ]
              },
              "Logout": {
                "type": "object",
                "properties": {
                  "user": {}
                },
                "required": [
                  "user"
                ]
              },
              "Create": {
                "type": "object",
                "properties": {
                  "object_id": {
                    "type": "string"
                  },
                  "object": {}
                },
                "required": [
                  "object_id",
                  "object"
                ]
              },
              "PartialUpdate": {},
              "Delete": {
                "type": "object",
                "properties": {
                  "object_id": {
                    "type": "string"
                  }
                },
                "required": [
                  "object_id"
                ]
              },
              "Update": {
                "type": "object",
                "properties": {
                  "object_id": {
                    "type": "string"
                  },
                  "object": {},
                  "previous": {}
                },
                "required": [
                  "object_id",
                  "object",
                  "previous"
                ]
              }
            },
            "required": [
              "Create",
              "Delete",
              "Login",
              "Logout",
              "PartialUpdate",
              "Update"
            ]
          }
        },
        "title": "User"
      }
    }
  },
  "schemas": {
    "CustomService.testOperation.input": {
      "type": "object",
      "properties": {
        "test": {
          "type": "string"
        },
        "num": {
          "type": "number"
        }
      },
      "required": [
        "test",
        "num"
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "CustomService.testOperation.input"
    },
    "CustomService.testOperationWithOutput.input": {
      "type": "object",
      "properties": {
        "test": {
          "type": "string"
        }
      },
      "required": [
        "test"
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "CustomService.testOperationWithOutput.input"
    },
    "CustomService.testOperationWithOutput.output": {
      "type": "object",
      "properties": {
        "result": {
          "type": "string"
        }
      },
      "required": [
        "result"
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "CustomService.testOperationWithOutput.output"
    },
    "SampleAppGoodBean.operation.input": {
      "type": "object",
      "properties": {
        "projectId": {
          "type": "string"
        }
      },
      "required": [
        "projectId"
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "SampleAppGoodBean.operation.input"
    },
    "WebdaDemo/BinaryFile": {
      "type": "object",
      "properties": {
        "0": {},
        "hash": {
          "type": "string",
          "description": "Will be computed by the service\n\nhash of the content"
        },
        "challenge": {
          "type": "string",
          "description": "Will be computed by the service\n\nhash of the content prefixed by 'WEBDA'"
        },
        "size": {
          "type": "number",
          "description": "Size of the binary"
        },
        "name": {
          "type": "string",
          "description": "Current name"
        },
        "mimetype": {
          "type": "string",
          "description": "Mimetype of the binary"
        },
        "metadata": {
          "description": "Metadatas stored along with the binary"
        },
        "originalname": {
          "type": "string",
          "description": "Original name"
        }
      },
      "required": [
        "0",
        "mimetype",
        "name",
        "size"
      ],
      "description": "Represent a file to store",
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "BinaryFile"
    },
    "WebdaDemo/Classroom.test.input": {
      "type": "object",
      "properties": {
        "test": {
          "type": "string"
        },
        "id": {
          "type": "string"
        }
      },
      "required": [
        "test",
        "id"
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "WebdaDemo/Classroom.test.input"
    },
    "WebdaDemo/MyInterface": {
      "type": "object",
      "properties": {
        "test": {
          "type": "string"
        },
        "num": {
          "type": "number"
        }
      },
      "required": [
        "test",
        "num"
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "MyInterface"
    },
    "WebdaDemo/SubSubProject.action.input": {
      "type": "object",
      "properties": {
        "param": {
          "type": "string",
          "description": "My param"
        }
      },
      "required": [
        "param"
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "WebdaDemo/SubSubProject.action.input"
    },
    "WebdaDemo/SubSubProject.action2.input": {
      "type": "object",
      "properties": {
        "_company": {
          "type": "string",
          "readOnly": true
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "uuid": {
          "type": "string"
        },
        "n": {
          "type": "number"
        },
        "test2": {
          "type": "string"
        },
        "_creator": {},
        "Events": {},
        "_creationDate": {},
        "_lastUpdate": {},
        "_new": {},
        "context": {}
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "WebdaDemo/SubSubProject.action2.input"
    },
    "WebdaDemo/SubSubProject.action3.input": "WebdaDemo/Project",
    "WebdaDemo/SubSubProject.action6.input": {
      "type": "string",
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "WebdaDemo/SubSubProject.action6.input"
    },
    "WebdaDemo/testInput": {
      "type": "object",
      "properties": {
        "test": {
          "type": "string"
        },
        "optional": {
          "type": "string"
        }
      },
      "required": [
        "test"
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "CustomBody"
    },
    "WebdaDemo/testOutput": {
      "type": "object",
      "properties": {
        "result": {
          "type": "string"
        }
      },
      "required": [
        "result"
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "CustomBody"
    },
    "WebdaDemo/AbstractProject": {
      "type": "object",
      "properties": {
        "context": {
          "type": "object",
          "properties": {
            "caches": {
              "description": "Get the caches linked to the context"
            },
            "_promises": {
              "type": "array",
              "items": {},
              "description": "Contain all registered promises to this context",
              "readOnly": true
            }
          },
          "required": [
            "caches"
          ],
          "description": "Context is the object that will be passed to the services"
        },
        "Events": {
          "$ref": "#/definitions/CoreModelEvents%3C%3E"
        },
        "_creationDate": {
          "type": "string",
          "format": "date-time",
          "description": "Creation date",
          "readOnly": true
        },
        "_lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Last update date",
          "readOnly": true
        },
        "_new": {
          "type": "boolean",
          "description": "The model is new and not saved yet\n\nIt is set by the factory method and by the create method",
          "readOnly": true
        },
        "_creator": {
          "type": "string",
          "description": "Object creator",
          "readOnly": true
        }
      },
      "required": [
        "Events",
        "context"
      ],
      "description": "This file contains several empty methods to test our auto docs\n\nAbstract class should not be exported as model",
      "$schema": "http://json-schema.org/draft-07/schema#",
      "definitions": {
        "CoreModelEvents<>": {
          "type": "object",
          "properties": {
            "Create": {
              "type": "object",
              "properties": {
                "object_id": {
                  "type": "string"
                },
                "object": {}
              },
              "required": [
                "object_id",
                "object"
              ]
            },
            "PartialUpdate": {},
            "Delete": {
              "type": "object",
              "properties": {
                "object_id": {
                  "type": "string"
                }
              },
              "required": [
                "object_id"
              ]
            },
            "Update": {
              "type": "object",
              "properties": {
                "object_id": {
                  "type": "string"
                },
                "object": {},
                "previous": {}
              },
              "required": [
                "object_id",
                "object",
                "previous"
              ]
            }
          },
          "required": [
            "Create",
            "PartialUpdate",
            "Delete",
            "Update"
          ],
          "description": "Event sent by models\n\nEvents are sent by the model to notify of changes after the changes are done\n\nIf you need to prevent the change, you should extend the object"
        }
      },
      "title": "AbstractProject"
    },
    "WebdaDemo/AnotherSubProject": {
      "type": "object",
      "properties": {
        "n": {
          "type": "number"
        },
        "test2": {
          "type": "string"
        },
        "context": {
          "type": "object",
          "properties": {
            "caches": {
              "description": "Get the caches linked to the context"
            },
            "_promises": {
              "type": "array",
              "items": {},
              "description": "Contain all registered promises to this context",
              "readOnly": true
            }
          },
          "required": [
            "caches"
          ],
          "description": "Context is the object that will be passed to the services"
        },
        "Events": {
          "$ref": "#/definitions/CoreModelEvents%3C%3E"
        },
        "_creationDate": {
          "type": "string",
          "format": "date-time",
          "description": "Creation date",
          "readOnly": true
        },
        "_lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Last update date",
          "readOnly": true
        },
        "_new": {
          "type": "boolean",
          "description": "The model is new and not saved yet\n\nIt is set by the factory method and by the create method",
          "readOnly": true
        },
        "_creator": {
          "type": "string",
          "description": "Object creator",
          "readOnly": true
        },
        "_company": {
          "type": "string",
          "readOnly": true
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "uuid": {
          "type": "string"
        }
      },
      "required": [
        "Events",
        "context",
        "n",
        "name",
        "test2",
        "type",
        "uuid"
      ],
      "description": "Test of TypeParams",
      "$schema": "http://json-schema.org/draft-07/schema#",
      "definitions": {
        "CoreModelEvents<>": {
          "type": "object",
          "properties": {
            "Create": {
              "type": "object",
              "properties": {
                "object_id": {
                  "type": "string"
                },
                "object": {}
              },
              "required": [
                "object_id",
                "object"
              ]
            },
            "PartialUpdate": {},
            "Delete": {
              "type": "object",
              "properties": {
                "object_id": {
                  "type": "string"
                }
              },
              "required": [
                "object_id"
              ]
            },
            "Update": {
              "type": "object",
              "properties": {
                "object_id": {
                  "type": "string"
                },
                "object": {},
                "previous": {}
              },
              "required": [
                "object_id",
                "object",
                "previous"
              ]
            }
          },
          "required": [
            "Create",
            "PartialUpdate",
            "Delete",
            "Update"
          ],
          "description": "Event sent by models\n\nEvents are sent by the model to notify of changes after the changes are done\n\nIf you need to prevent the change, you should extend the object"
        }
      },
      "title": "AnotherSubProject"
    },
    "WebdaDemo/Brand": {
      "type": "object",
      "properties": {
        "context": {
          "type": "object",
          "properties": {
            "caches": {
              "description": "Get the caches linked to the context"
            },
            "_promises": {
              "type": "array",
              "items": {},
              "description": "Contain all registered promises to this context",
              "readOnly": true
            }
          },
          "required": [
            "caches"
          ],
          "description": "Context is the object that will be passed to the services"
        },
        "Events": {
          "$ref": "#/definitions/CoreModelEvents%3C%3E"
        },
        "_creationDate": {
          "type": "string",
          "format": "date-time",
          "description": "Creation date",
          "readOnly": true
        },
        "_lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Last update date",
          "readOnly": true
        },
        "_new": {
          "type": "boolean",
          "description": "The model is new and not saved yet\n\nIt is set by the factory method and by the create method",
          "readOnly": true
        },
        "uuid": {
          "type": "string",
          "readOnly": true,
          "$generated": true
        },
        "name": {
          "type": "string"
        }
      },
      "required": [
        "Events",
        "context",
        "name"
      ],
      "description": "Model not exposed on purpose",
      "$schema": "http://json-schema.org/draft-07/schema#",
      "definitions": {
        "CoreModelEvents<>": {
          "type": "object",
          "properties": {
            "Create": {
              "type": "object",
              "properties": {
                "object_id": {
                  "type": "string"
                },
                "object": {}
              },
              "required": [
                "object_id",
                "object"
              ]
            },
            "PartialUpdate": {},
            "Delete": {
              "type": "object",
              "properties": {
                "object_id": {
                  "type": "string"
                }
              },
              "required": [
                "object_id"
              ]
            },
            "Update": {
              "type": "object",
              "properties": {
                "object_id": {
                  "type": "string"
                },
                "object": {},
                "previous": {}
              },
              "required": [
                "object_id",
                "object",
                "previous"
              ]
            }
          },
          "required": [
            "Create",
            "PartialUpdate",
            "Delete",
            "Update"
          ],
          "description": "Event sent by models\n\nEvents are sent by the model to notify of changes after the changes are done\n\nIf you need to prevent the change, you should extend the object"
        }
      },
      "title": "Brand"
    },
    "WebdaDemo/Classroom": {
      "type": "object",
      "properties": {
        "context": {
          "type": "object",
          "properties": {
            "caches": {
              "description": "Get the caches linked to the context"
            },
            "_promises": {
              "type": "array",
              "items": {},
              "description": "Contain all registered promises to this context",
              "readOnly": true
            }
          },
          "required": [
            "caches"
          ],
          "description": "Context is the object that will be passed to the services"
        },
        "Events": {
          "$ref": "#/definitions/CoreModelEvents%3C%3E"
        },
        "_creationDate": {
          "type": "string",
          "format": "date-time",
          "description": "Creation date",
          "readOnly": true
        },
        "_lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Last update date",
          "readOnly": true
        },
        "_new": {
          "type": "boolean",
          "description": "The model is new and not saved yet\n\nIt is set by the factory method and by the create method",
          "readOnly": true
        },
        "uuid": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "courses": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "uuid": {
                "type": "string"
              }
            },
            "required": [
              "name",
              "uuid"
            ],
            "additionalProperties": false
          },
          "readOnly": true
        }
      },
      "required": [
        "Events",
        "context",
        "name",
        "uuid"
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "definitions": {
        "CoreModelEvents<>": {
          "type": "object",
          "properties": {
            "Create": {
              "type": "object",
              "properties": {
                "object_id": {
                  "type": "string"
                },
                "object": {}
              },
              "required": [
                "object_id",
                "object"
              ]
            },
            "PartialUpdate": {},
            "Delete": {
              "type": "object",
              "properties": {
                "object_id": {
                  "type": "string"
                }
              },
              "required": [
                "object_id"
              ]
            },
            "Update": {
              "type": "object",
              "properties": {
                "object_id": {
                  "type": "string"
                },
                "object": {},
                "previous": {}
              },
              "required": [
                "object_id",
                "object",
                "previous"
              ]
            }
          },
          "required": [
            "Create",
            "PartialUpdate",
            "Delete",
            "Update"
          ],
          "description": "Event sent by models\n\nEvents are sent by the model to notify of changes after the changes are done\n\nIf you need to prevent the change, you should extend the object"
        }
      },
      "title": "Classroom"
    },
    "WebdaDemo/Company": {
      "type": "object",
      "properties": {
        "context": {
          "type": "object",
          "properties": {
            "caches": {
              "description": "Get the caches linked to the context"
            },
            "_promises": {
              "type": "array",
              "items": {},
              "description": "Contain all registered promises to this context",
              "readOnly": true
            }
          },
          "required": [
            "caches"
          ],
          "description": "Context is the object that will be passed to the services"
        },
        "Events": {
          "$ref": "#/definitions/CoreModelEvents%3C%3E"
        },
        "_creationDate": {
          "type": "string",
          "format": "date-time",
          "description": "Creation date",
          "readOnly": true
        },
        "_lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Last update date",
          "readOnly": true
        },
        "_new": {
          "type": "boolean",
          "description": "The model is new and not saved yet\n\nIt is set by the factory method and by the create method",
          "readOnly": true
        },
        "_projects": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "uuid": {
                "type": "string"
              }
            },
            "required": [
              "name",
              "type",
              "uuid"
            ],
            "additionalProperties": false
          },
          "readOnly": true
        },
        "name": {
          "type": "string"
        },
        "mapString": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Test of maps for GraphQL"
        },
        "mapAny": {
          "type": "object"
        },
        "mapNumber": {
          "type": "object",
          "additionalProperties": {
            "type": "number"
          }
        },
        "mapBoolean": {
          "type": "object",
          "additionalProperties": {
            "type": "boolean"
          }
        },
        "mapObject": {
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "properties": {
              "test": {
                "type": "number"
              },
              "b": {
                "type": "boolean"
              },
              "status": {
                "type": "string"
              }
            },
            "required": [
              "test",
              "b",
              "status"
            ]
          }
        },
        "permissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Permission"
          }
        }
      },
      "required": [
        "Events",
        "context",
        "name"
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "definitions": {
        "CoreModelEvents<>": {
          "type": "object",
          "properties": {
            "Create": {
              "type": "object",
              "properties": {
                "object_id": {
                  "type": "string"
                },
                "object": {}
              },
              "required": [
                "object_id",
                "object"
              ]
            },
            "PartialUpdate": {},
            "Delete": {
              "type": "object",
              "properties": {
                "object_id": {
                  "type": "string"
                }
              },
              "required": [
                "object_id"
              ]
            },
            "Update": {
              "type": "object",
              "properties": {
                "object_id": {
                  "type": "string"
                },
                "object": {},
                "previous": {}
              },
              "required": [
                "object_id",
                "object",
                "previous"
              ]
            }
          },
          "required": [
            "Create",
            "PartialUpdate",
            "Delete",
            "Update"
          ],
          "description": "Event sent by models\n\nEvents are sent by the model to notify of changes after the changes are done\n\nIf you need to prevent the change, you should extend the object"
        },
        "Permission": {
          "type": "string",
          "enum": [
            "PRODUCT_1",
            "PRODUCT_2",
            "PRODUCT_3"
          ]
        }
      },
      "title": "Company"
    },
    "WebdaDemo/Computer": {
      "type": "object",
      "properties": {
        "context": {
          "type": "object",
          "properties": {
            "caches": {
              "description": "Get the caches linked to the context"
            },
            "_promises": {
              "type": "array",
              "items": {},
              "description": "Contain all registered promises to this context",
              "readOnly": true
            }
          },
          "required": [
            "caches"
          ],
          "description": "Context is the object that will be passed to the services"
        },
        "Events": {
          "$ref": "#/definitions/CoreModelEvents%3C%3E"
        },
        "_creationDate": {
          "type": "string",
          "format": "date-time",
          "description": "Creation date",
          "readOnly": true
        },
        "_lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Last update date",
          "readOnly": true
        },
        "_new": {
          "type": "boolean",
          "description": "The model is new and not saved yet\n\nIt is set by the factory method and by the create method",
          "readOnly": true
        },
        "_user": {
          "type": "string",
          "readOnly": true
        },
        "_loanTo": {
          "type": "string",
          "readOnly": true
        },
        "name": {
          "type": "string"
        }
      },
      "required": [
        "Events",
        "context",
        "name"
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "definitions": {
        "CoreModelEvents<>": {
          "type": "object",
          "properties": {
            "Create": {
              "type": "object",
              "properties": {
                "object_id": {
                  "type": "string"
                },
                "object": {}
              },
              "required": [
                "object_id",
                "object"
              ]
            },
            "PartialUpdate": {},
            "Delete": {
              "type": "object",
              "properties": {
                "object_id": {
                  "type": "string"
                }
              },
              "required": [
                "object_id"
              ]
            },
            "Update": {
              "type": "object",
              "properties": {
                "object_id": {
                  "type": "string"
                },
                "object": {},
                "previous": {}
              },
              "required": [
                "object_id",
                "object",
                "previous"
              ]
            }
          },
          "required": [
            "Create",
            "PartialUpdate",
            "Delete",
            "Update"
          ],
          "description": "Event sent by models\n\nEvents are sent by the model to notify of changes after the changes are done\n\nIf you need to prevent the change, you should extend the object"
        }
      },
      "title": "Computer"
    },
    "WebdaDemo/ComputerScreen": {
      "type": "object",
      "properties": {
        "context": {
          "type": "object",
          "properties": {
            "caches": {
              "description": "Get the caches linked to the context"
            },
            "_promises": {
              "type": "array",
              "items": {},
              "description": "Contain all registered promises to this context",
              "readOnly": true
            }
          },
          "required": [
            "caches"
          ],
          "description": "Context is the object that will be passed to the services"
        },
        "Events": {
          "$ref": "#/definitions/CoreModelEvents%3C%3E"
        },
        "_creationDate": {
          "type": "string",
          "format": "date-time",
          "description": "Creation date",
          "readOnly": true
        },
        "_lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Last update date",
          "readOnly": true
        },
        "_new": {
          "type": "boolean",
          "description": "The model is new and not saved yet\n\nIt is set by the factory method and by the create method",
          "readOnly": true
        },
        "uuid": {
          "type": "string",
          "readOnly": true,
          "$generated": true
        },
        "classroom": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "modelId": {
          "type": "string"
        },
        "serialNumber": {
          "type": "string"
        }
      },
      "required": [
        "Events",
        "classroom",
        "context",
        "modelId",
        "name",
        "serialNumber"
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "definitions": {
        "CoreModelEvents<>": {
          "type": "object",
          "properties": {
            "Create": {
              "type": "object",
              "properties": {
                "object_id": {
                  "type": "string"
                },
                "object": {}
              },
              "required": [
                "object_id",
                "object"
              ]
            },
            "PartialUpdate": {},
            "Delete": {
              "type": "object",
              "properties": {
                "object_id": {
                  "type": "string"
                }
              },
              "required": [
                "object_id"
              ]
            },
            "Update": {
              "type": "object",
              "properties": {
                "object_id": {
                  "type": "string"
                },
                "object": {},
                "previous": {}
              },
              "required": [
                "object_id",
                "object",
                "previous"
              ]
            }
          },
          "required": [
            "Create",
            "PartialUpdate",
            "Delete",
            "Update"
          ],
          "description": "Event sent by models\n\nEvents are sent by the model to notify of changes after the changes are done\n\nIf you need to prevent the change, you should extend the object"
        }
      },
      "title": "ComputerScreen"
    },
    "WebdaDemo/Contact": {
      "type": "object",
      "properties": {
        "context": {
          "type": "object",
          "properties": {
            "caches": {
              "description": "Get the caches linked to the context"
            },
            "_promises": {
              "type": "array",
              "items": {},
              "description": "Contain all registered promises to this context",
              "readOnly": true
            }
          },
          "required": [
            "caches"
          ],
          "description": "Context is the object that will be passed to the services"
        },
        "Events": {
          "$ref": "#/definitions/CoreModelEvents%3C%3E"
        },
        "_creationDate": {
          "type": "string",
          "format": "date-time",
          "description": "Creation date",
          "readOnly": true
        },
        "_lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Last update date",
          "readOnly": true
        },
        "_new": {
          "type": "boolean",
          "description": "The model is new and not saved yet\n\nIt is set by the factory method and by the create method",
          "readOnly": true
        },
        "firstName": {
          "type": "string",
          "description": "Contact firstname"
        },
        "lastName": {
          "type": "string",
          "description": "Contact lastname"
        },
        "type": {
          "type": "string",
          "enum": [
            "PERSONAL",
            "PROFESSIONAL"
          ],
          "description": "Contact type"
        },
        "age": {
          "type": "number",
          "description": "Contact age",
          "minimum": 0
        },
        "readonly": {
          "type": "number",
          "description": "To indicate a property that will be set by server, similar to",
          "readOnly": true
        },
        "optional": {
          "type": "string",
          "description": "Useful to auto complete on the creation side without forcing UI to push the attribute"
        },
        "avatar": {
          "type": "object",
          "readOnly": true
        },
        "photos": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "location": {
                "type": "object",
                "properties": {
                  "lat": {
                    "type": "number"
                  },
                  "lng": {
                    "type": "number"
                  }
                },
                "required": [
                  "lat",
                  "lng"
                ]
              }
            },
            "required": [
              "location"
            ]
          },
          "readOnly": true
        },
        "owner": {
          "type": "string"
        }
      },
      "required": [
        "Events",
        "age",
        "context",
        "firstName",
        "lastName",
        "owner",
        "type"
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "definitions": {
        "CoreModelEvents<>": {
          "type": "object",
          "properties": {
            "Create": {
              "type": "object",
              "properties": {
                "object_id": {
                  "type": "string"
                },
                "object": {}
              },
              "required": [
                "object_id",
                "object"
              ]
            },
            "PartialUpdate": {},
            "Delete": {
              "type": "object",
              "properties": {
                "object_id": {
                  "type": "string"
                }
              },
              "required": [
                "object_id"
              ]
            },
            "Update": {
              "type": "object",
              "properties": {
                "object_id": {
                  "type": "string"
                },
                "object": {},
                "previous": {}
              },
              "required": [
                "object_id",
                "object",
                "previous"
              ]
            }
          },
          "required": [
            "Create",
            "PartialUpdate",
            "Delete",
            "Update"
          ],
          "description": "Event sent by models\n\nEvents are sent by the model to notify of changes after the changes are done\n\nIf you need to prevent the change, you should extend the object"
        }
      },
      "title": "Contact"
    },
    "WebdaDemo/Course": {
      "type": "object",
      "properties": {
        "context": {
          "type": "object",
          "properties": {
            "caches": {
              "description": "Get the caches linked to the context"
            },
            "_promises": {
              "type": "array",
              "items": {},
              "description": "Contain all registered promises to this context",
              "readOnly": true
            }
          },
          "required": [
            "caches"
          ],
          "description": "Context is the object that will be passed to the services"
        },
        "Events": {
          "$ref": "#/definitions/CoreModelEvents%3C%3E"
        },
        "_creationDate": {
          "type": "string",
          "format": "date-time",
          "description": "Creation date",
          "readOnly": true
        },
        "_lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Last update date",
          "readOnly": true
        },
        "_new": {
          "type": "boolean",
          "description": "The model is new and not saved yet\n\nIt is set by the factory method and by the create method",
          "readOnly": true
        },
        "uuid": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "classroom": {
          "type": "string"
        },
        "teacher": {
          "type": "string"
        },
        "students": {
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "properties": {
              "firstName": {
                "type": "string"
              },
              "lastName": {
                "type": "string"
              },
              "uuid": {
                "type": "string"
              }
            },
            "required": [
              "firstName",
              "uuid"
            ]
          }
        }
      },
      "required": [
        "Events",
        "classroom",
        "context",
        "name",
        "students",
        "teacher",
        "uuid"
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "definitions": {
        "CoreModelEvents<>": {
          "type": "object",
          "properties": {
            "Create": {
              "type": "object",
              "properties": {
                "object_id": {
                  "type": "string"
                },
                "object": {}
              },
              "required": [
                "object_id",
                "object"
              ]
            },
            "PartialUpdate": {},
            "Delete": {
              "type": "object",
              "properties": {
                "object_id": {
                  "type": "string"
                }
              },
              "required": [
                "object_id"
              ]
            },
            "Update": {
              "type": "object",
              "properties": {
                "object_id": {
                  "type": "string"
                },
                "object": {},
                "previous": {}
              },
              "required": [
                "object_id",
                "object",
                "previous"
              ]
            }
          },
          "required": [
            "Create",
            "PartialUpdate",
            "Delete",
            "Update"
          ],
          "description": "Event sent by models\n\nEvents are sent by the model to notify of changes after the changes are done\n\nIf you need to prevent the change, you should extend the object"
        }
      },
      "title": "Course"
    },
    "WebdaDemo/Hardware": {
      "type": "object",
      "properties": {
        "context": {
          "type": "object",
          "properties": {
            "caches": {
              "description": "Get the caches linked to the context"
            },
            "_promises": {
              "type": "array",
              "items": {},
              "description": "Contain all registered promises to this context",
              "readOnly": true
            }
          },
          "required": [
            "caches"
          ],
          "description": "Context is the object that will be passed to the services"
        },
        "Events": {
          "$ref": "#/definitions/CoreModelEvents%3C%3E"
        },
        "_creationDate": {
          "type": "string",
          "format": "date-time",
          "description": "Creation date",
          "readOnly": true
        },
        "_lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Last update date",
          "readOnly": true
        },
        "_new": {
          "type": "boolean",
          "description": "The model is new and not saved yet\n\nIt is set by the factory method and by the create method",
          "readOnly": true
        },
        "uuid": {
          "type": "string",
          "readOnly": true,
          "$generated": true
        },
        "classroom": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "required": [
        "Events",
        "classroom",
        "context",
        "name"
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "definitions": {
        "CoreModelEvents<>": {
          "type": "object",
          "properties": {
            "Create": {
              "type": "object",
              "properties": {
                "object_id": {
                  "type": "string"
                },
                "object": {}
              },
              "required": [
                "object_id",
                "object"
              ]
            },
            "PartialUpdate": {},
            "Delete": {
              "type": "object",
              "properties": {
                "object_id": {
                  "type": "string"
                }
              },
              "required": [
                "object_id"
              ]
            },
            "Update": {
              "type": "object",
              "properties": {
                "object_id": {
                  "type": "string"
                },
                "object": {},
                "previous": {}
              },
              "required": [
                "object_id",
                "object",
                "previous"
              ]
            }
          },
          "required": [
            "Create",
            "PartialUpdate",
            "Delete",
            "Update"
          ],
          "description": "Event sent by models\n\nEvents are sent by the model to notify of changes after the changes are done\n\nIf you need to prevent the change, you should extend the object"
        }
      },
      "title": "Hardware"
    },
    "WebdaDemo/Project": {
      "type": "object",
      "properties": {
        "n": {
          "type": "number"
        },
        "test2": {
          "type": "string"
        },
        "context": {
          "type": "object",
          "properties": {
            "caches": {
              "description": "Get the caches linked to the context"
            },
            "_promises": {
              "type": "array",
              "items": {},
              "description": "Contain all registered promises to this context",
              "readOnly": true
            }
          },
          "required": [
            "caches"
          ],
          "description": "Context is the object that will be passed to the services"
        },
        "Events": {
          "$ref": "#/definitions/CoreModelEvents%3C%3E"
        },
        "_creationDate": {
          "type": "string",
          "format": "date-time",
          "description": "Creation date",
          "readOnly": true
        },
        "_lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Last update date",
          "readOnly": true
        },
        "_new": {
          "type": "boolean",
          "description": "The model is new and not saved yet\n\nIt is set by the factory method and by the create method",
          "readOnly": true
        },
        "_creator": {
          "type": "string",
          "description": "Object creator",
          "readOnly": true
        },
        "_company": {
          "type": "string",
          "readOnly": true
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "uuid": {
          "type": "string"
        }
      },
      "required": [
        "Events",
        "context",
        "n",
        "name",
        "test2",
        "type",
        "uuid"
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "definitions": {
        "CoreModelEvents<>": {
          "type": "object",
          "properties": {
            "Create": {
              "type": "object",
              "properties": {
                "object_id": {
                  "type": "string"
                },
                "object": {}
              },
              "required": [
                "object_id",
                "object"
              ]
            },
            "PartialUpdate": {},
            "Delete": {
              "type": "object",
              "properties": {
                "object_id": {
                  "type": "string"
                }
              },
              "required": [
                "object_id"
              ]
            },
            "Update": {
              "type": "object",
              "properties": {
                "object_id": {
                  "type": "string"
                },
                "object": {},
                "previous": {}
              },
              "required": [
                "object_id",
                "object",
                "previous"
              ]
            }
          },
          "required": [
            "Create",
            "PartialUpdate",
            "Delete",
            "Update"
          ],
          "description": "Event sent by models\n\nEvents are sent by the model to notify of changes after the changes are done\n\nIf you need to prevent the change, you should extend the object"
        }
      },
      "title": "Project"
    },
    "WebdaDemo/Student": {
      "type": "object",
      "properties": {
        "context": {
          "type": "object",
          "properties": {
            "caches": {
              "description": "Get the caches linked to the context"
            },
            "_promises": {
              "type": "array",
              "items": {},
              "description": "Contain all registered promises to this context",
              "readOnly": true
            }
          },
          "required": [
            "caches"
          ],
          "description": "Context is the object that will be passed to the services"
        },
        "Events": {
          "$ref": "#/definitions/CoreModelEvents%3C%3E"
        },
        "_creationDate": {
          "type": "string",
          "format": "date-time",
          "description": "Creation date",
          "readOnly": true
        },
        "_lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Last update date",
          "readOnly": true
        },
        "_new": {
          "type": "boolean",
          "description": "The model is new and not saved yet\n\nIt is set by the factory method and by the create method",
          "readOnly": true
        },
        "uuid": {
          "type": "string",
          "readOnly": true,
          "$generated": true
        },
        "email": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "order": {
          "type": "number"
        },
        "friends": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "email": {
                "type": "string"
              },
              "firstName": {
                "type": "string"
              },
              "lastName": {
                "type": "string"
              },
              "uuid": {
                "type": "string"
              }
            },
            "required": [
              "email",
              "firstName",
              "lastName",
              "uuid"
            ]
          }
        },
        "teachers": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "courses": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "uuid": {
                "type": "string"
              }
            },
            "required": [
              "name",
              "uuid"
            ],
            "additionalProperties": false
          },
          "readOnly": true
        },
        "constraints": {
          "type": "null"
        }
      },
      "required": [
        "Events",
        "constraints",
        "context",
        "email",
        "firstName",
        "friends",
        "lastName",
        "order",
        "teachers"
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "definitions": {
        "CoreModelEvents<>": {
          "type": "object",
          "properties": {
            "Create": {
              "type": "object",
              "properties": {
                "object_id": {
                  "type": "string"
                },
                "object": {}
              },
              "required": [
                "object_id",
                "object"
              ]
            },
            "PartialUpdate": {},
            "Delete": {
              "type": "object",
              "properties": {
                "object_id": {
                  "type": "string"
                }
              },
              "required": [
                "object_id"
              ]
            },
            "Update": {
              "type": "object",
              "properties": {
                "object_id": {
                  "type": "string"
                },
                "object": {},
                "previous": {}
              },
              "required": [
                "object_id",
                "object",
                "previous"
              ]
            }
          },
          "required": [
            "Create",
            "PartialUpdate",
            "Delete",
            "Update"
          ],
          "description": "Event sent by models\n\nEvents are sent by the model to notify of changes after the changes are done\n\nIf you need to prevent the change, you should extend the object"
        }
      },
      "title": "Student"
    },
    "WebdaDemo/SubProject": {
      "type": "object",
      "properties": {
        "n": {
          "type": "number"
        },
        "test2": {
          "type": "string"
        },
        "context": {
          "type": "object",
          "properties": {
            "caches": {
              "description": "Get the caches linked to the context"
            },
            "_promises": {
              "type": "array",
              "items": {},
              "description": "Contain all registered promises to this context",
              "readOnly": true
            }
          },
          "required": [
            "caches"
          ],
          "description": "Context is the object that will be passed to the services"
        },
        "Events": {
          "$ref": "#/definitions/CoreModelEvents%3C%3E"
        },
        "_creationDate": {
          "type": "string",
          "format": "date-time",
          "description": "Creation date",
          "readOnly": true
        },
        "_lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Last update date",
          "readOnly": true
        },
        "_new": {
          "type": "boolean",
          "description": "The model is new and not saved yet\n\nIt is set by the factory method and by the create method",
          "readOnly": true
        },
        "_creator": {
          "type": "string",
          "description": "Object creator",
          "readOnly": true
        },
        "_company": {
          "type": "string",
          "readOnly": true
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "uuid": {
          "type": "string"
        }
      },
      "required": [
        "Events",
        "context",
        "n",
        "name",
        "test2",
        "type",
        "uuid"
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "definitions": {
        "CoreModelEvents<>": {
          "type": "object",
          "properties": {
            "Create": {
              "type": "object",
              "properties": {
                "object_id": {
                  "type": "string"
                },
                "object": {}
              },
              "required": [
                "object_id",
                "object"
              ]
            },
            "PartialUpdate": {},
            "Delete": {
              "type": "object",
              "properties": {
                "object_id": {
                  "type": "string"
                }
              },
              "required": [
                "object_id"
              ]
            },
            "Update": {
              "type": "object",
              "properties": {
                "object_id": {
                  "type": "string"
                },
                "object": {},
                "previous": {}
              },
              "required": [
                "object_id",
                "object",
                "previous"
              ]
            }
          },
          "required": [
            "Create",
            "PartialUpdate",
            "Delete",
            "Update"
          ],
          "description": "Event sent by models\n\nEvents are sent by the model to notify of changes after the changes are done\n\nIf you need to prevent the change, you should extend the object"
        }
      },
      "title": "SubProject"
    },
    "WebdaDemo/SubSubProject": {
      "type": "object",
      "properties": {
        "n": {
          "type": "number"
        },
        "test2": {
          "type": "string"
        },
        "context": {
          "type": "object",
          "properties": {
            "caches": {
              "description": "Get the caches linked to the context"
            },
            "_promises": {
              "type": "array",
              "items": {},
              "description": "Contain all registered promises to this context",
              "readOnly": true
            }
          },
          "required": [
            "caches"
          ],
          "description": "Context is the object that will be passed to the services"
        },
        "Events": {
          "$ref": "#/definitions/CoreModelEvents%3C%3E"
        },
        "_creationDate": {
          "type": "string",
          "format": "date-time",
          "description": "Creation date",
          "readOnly": true
        },
        "_lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Last update date",
          "readOnly": true
        },
        "_new": {
          "type": "boolean",
          "description": "The model is new and not saved yet\n\nIt is set by the factory method and by the create method",
          "readOnly": true
        },
        "_creator": {
          "type": "string",
          "description": "Object creator",
          "readOnly": true
        },
        "_company": {
          "type": "string",
          "readOnly": true
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "uuid": {
          "type": "string"
        },
        "attribute1": {
          "type": "string"
        }
      },
      "required": [
        "Events",
        "attribute1",
        "context",
        "n",
        "name",
        "test2",
        "type",
        "uuid"
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "definitions": {
        "CoreModelEvents<>": {
          "type": "object",
          "properties": {
            "Create": {
              "type": "object",
              "properties": {
                "object_id": {
                  "type": "string"
                },
                "object": {}
              },
              "required": [
                "object_id",
                "object"
              ]
            },
            "PartialUpdate": {},
            "Delete": {
              "type": "object",
              "properties": {
                "object_id": {
                  "type": "string"
                }
              },
              "required": [
                "object_id"
              ]
            },
            "Update": {
              "type": "object",
              "properties": {
                "object_id": {
                  "type": "string"
                },
                "object": {},
                "previous": {}
              },
              "required": [
                "object_id",
                "object",
                "previous"
              ]
            }
          },
          "required": [
            "Create",
            "PartialUpdate",
            "Delete",
            "Update"
          ],
          "description": "Event sent by models\n\nEvents are sent by the model to notify of changes after the changes are done\n\nIf you need to prevent the change, you should extend the object"
        }
      },
      "title": "SubSubProject"
    },
    "WebdaDemo/Teacher": {
      "type": "object",
      "properties": {
        "context": {
          "type": "object",
          "properties": {
            "caches": {
              "description": "Get the caches linked to the context"
            },
            "_promises": {
              "type": "array",
              "items": {},
              "description": "Contain all registered promises to this context",
              "readOnly": true
            }
          },
          "required": [
            "caches"
          ],
          "description": "Context is the object that will be passed to the services"
        },
        "Events": {
          "$ref": "#/definitions/CoreModelEvents%3C%3E"
        },
        "_creationDate": {
          "type": "string",
          "format": "date-time",
          "description": "Creation date",
          "readOnly": true
        },
        "_lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Last update date",
          "readOnly": true
        },
        "_new": {
          "type": "boolean",
          "description": "The model is new and not saved yet\n\nIt is set by the factory method and by the create method",
          "readOnly": true
        },
        "uuid": {
          "type": "string"
        },
        "courses": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "uuid": {
                "type": "string"
              }
            },
            "required": [
              "name",
              "uuid"
            ],
            "additionalProperties": false
          },
          "readOnly": true
        },
        "students": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "email": {
                "type": "string"
              },
              "firstName": {
                "type": "string"
              },
              "lastName": {
                "type": "string"
              },
              "uuid": {
                "type": "string"
              }
            },
            "required": [
              "email",
              "firstName",
              "lastName",
              "uuid"
            ],
            "additionalProperties": false
          },
          "readOnly": true
        },
        "name": {
          "type": "string"
        },
        "senior": {
          "type": "boolean"
        },
        "anyArray": {
          "type": "array",
          "items": {},
          "description": "Test that graphql can handle any[]"
        }
      },
      "required": [
        "Events",
        "anyArray",
        "context",
        "name",
        "senior",
        "uuid"
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "definitions": {
        "CoreModelEvents<>": {
          "type": "object",
          "properties": {
            "Create": {
              "type": "object",
              "properties": {
                "object_id": {
                  "type": "string"
                },
                "object": {}
              },
              "required": [
                "object_id",
                "object"
              ]
            },
            "PartialUpdate": {},
            "Delete": {
              "type": "object",
              "properties": {
                "object_id": {
                  "type": "string"
                }
              },
              "required": [
                "object_id"
              ]
            },
            "Update": {
              "type": "object",
              "properties": {
                "object_id": {
                  "type": "string"
                },
                "object": {},
                "previous": {}
              },
              "required": [
                "object_id",
                "object",
                "previous"
              ]
            }
          },
          "required": [
            "Create",
            "PartialUpdate",
            "Delete",
            "Update"
          ],
          "description": "Event sent by models\n\nEvents are sent by the model to notify of changes after the changes are done\n\nIf you need to prevent the change, you should extend the object"
        }
      },
      "title": "Teacher"
    },
    "WebdaDemo/User": {
      "type": "object",
      "properties": {
        "context": {
          "type": "object",
          "properties": {
            "caches": {
              "description": "Get the caches linked to the context"
            },
            "_promises": {
              "type": "array",
              "items": {},
              "description": "Contain all registered promises to this context",
              "readOnly": true
            }
          },
          "required": [
            "caches"
          ],
          "description": "Context is the object that will be passed to the services"
        },
        "Events": {
          "$ref": "#/definitions/UserEvents%3C%3E"
        },
        "_creationDate": {
          "type": "string",
          "format": "date-time",
          "description": "Creation date",
          "readOnly": true
        },
        "_lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Last update date",
          "readOnly": true
        },
        "_new": {
          "type": "boolean",
          "description": "The model is new and not saved yet\n\nIt is set by the factory method and by the create method",
          "readOnly": true
        },
        "displayName": {
          "type": "string",
          "description": "Display name for this user"
        },
        "_lastPasswordRecovery": {
          "type": "number",
          "description": "Last time the password was recovered",
          "readOnly": true
        },
        "_avatar": {
          "type": "string",
          "description": "Define the user avatar if exists",
          "readOnly": true
        },
        "locale": {
          "type": "string",
          "description": "Contains the locale of the user if known"
        },
        "email": {
          "type": "string",
          "description": "Contain main user email if exists"
        },
        "_company": {
          "type": "string",
          "readOnly": true
        },
        "name": {
          "type": "string"
        },
        "profilePicture": {
          "type": "object",
          "properties": {
            "width": {
              "type": "number"
            },
            "height": {
              "type": "number"
            }
          },
          "required": [
            "width",
            "height"
          ],
          "readOnly": true
        },
        "images": {
          "type": "array",
          "items": {
            "type": "object"
          },
          "readOnly": true
        },
        "contacts": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "firstName": {
                "type": "string",
                "description": "Contact firstname"
              },
              "lastName": {
                "type": "string",
                "description": "Contact lastname"
              },
              "age": {
                "type": "number",
                "description": "Contact age",
                "minimum": 0
              },
              "uuid": {
                "type": "string"
              }
            },
            "required": [
              "firstName",
              "lastName",
              "age",
              "uuid"
            ],
            "additionalProperties": false
          },
          "readOnly": true
        }
      },
      "required": [
        "Events",
        "context",
        "displayName",
        "name"
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "definitions": {
        "UserEvents<>": {
          "type": "object",
          "properties": {
            "Login": {
              "type": "object",
              "properties": {
                "user": {}
              },
              "required": [
                "user"
              ]
            },
            "Logout": {
              "type": "object",
              "properties": {
                "user": {}
              },
              "required": [
                "user"
              ]
            },
            "Create": {
              "type": "object",
              "properties": {
                "object_id": {
                  "type": "string"
                },
                "object": {}
              },
              "required": [
                "object_id",
                "object"
              ]
            },
            "PartialUpdate": {},
            "Delete": {
              "type": "object",
              "properties": {
                "object_id": {
                  "type": "string"
                }
              },
              "required": [
                "object_id"
              ]
            },
            "Update": {
              "type": "object",
              "properties": {
                "object_id": {
                  "type": "string"
                },
                "object": {},
                "previous": {}
              },
              "required": [
                "object_id",
                "object",
                "previous"
              ]
            }
          },
          "required": [
            "Create",
            "Delete",
            "Login",
            "Logout",
            "PartialUpdate",
            "Update"
          ]
        }
      },
      "title": "User"
    },
    "WebdaDemo/AnotherService": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "Type of the service"
        },
        "anotherParameter": {
          "type": "string"
        },
        "interfaceParam": {
          "$ref": "#/definitions/Partial%3Cinterface-vices_compiler.ts-250-298-vices_compiler.ts-0-1248%3E",
          "description": "The Partial will generate a new $ref"
        }
      },
      "required": [
        "anotherParameter",
        "interfaceParam",
        "type"
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "definitions": {
        "Partial<interface-vices_compiler.ts-250-298-vices_compiler.ts-0-1248>": {
          "type": "object",
          "properties": {
            "test": {
              "type": "string"
            }
          }
        }
      },
      "title": "AnotherService"
    },
    "WebdaDemo/CustomReusableService": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "Type of the service"
        },
        "mandatoryField": {
          "type": "string"
        }
      },
      "required": [
        "mandatoryField",
        "type"
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "CustomReusableService"
    },
    "WebdaDemo/FourthOtherService": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "Type of the service"
        },
        "anotherParameter": {
          "type": "string"
        },
        "interfaceParam": {
          "$ref": "#/definitions/Partial%3Cinterface-vices_compiler.ts-250-298-vices_compiler.ts-0-1248%3E",
          "description": "The Partial will generate a new $ref"
        },
        "fourthParameter": {
          "type": "number",
          "minimum": 100,
          "maximum": 1000
        }
      },
      "required": [
        "anotherParameter",
        "fourthParameter",
        "interfaceParam",
        "type"
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "definitions": {
        "Partial<interface-vices_compiler.ts-250-298-vices_compiler.ts-0-1248>": {
          "type": "object",
          "properties": {
            "test": {
              "type": "string"
            }
          }
        }
      },
      "title": "FourthOtherService"
    },
    "WebdaDemo/QueueService": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "Type of the service"
        },
        "workerDelayer": {
          "type": "object",
          "properties": {
            "interval": {
              "type": "number",
              "description": "Interval"
            },
            "type": {
              "type": "string",
              "description": "Type of delayer registered in WaitDelayerFactoryRegistry"
            }
          },
          "required": [
            "interval",
            "type"
          ],
          "description": "Delayer between two failed attempts to process messages"
        },
        "workerParallelism": {
          "type": "boolean",
          "description": "Define if worker should process multi message received in //",
          "default": true
        },
        "maxConsumers": {
          "type": "number",
          "description": "Max number of queue consumers Queue will auto increase to this max number if queue is loaded and it will decrease to just one consumer if no messages are available",
          "default": 10
        },
        "expire": {
          "type": "number",
          "description": "Number of seconds before droping message",
          "default": 30
        }
      },
      "required": [
        "maxConsumers",
        "type",
        "workerParallelism"
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "QueueService"
    },
    "WebdaDemo/SecondOtherService": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "Type of the service"
        },
        "anotherParameter": {
          "type": "string"
        },
        "interfaceParam": {
          "$ref": "#/definitions/Partial%3Cinterface-vices_compiler.ts-250-298-vices_compiler.ts-0-1248%3E",
          "description": "The Partial will generate a new $ref"
        }
      },
      "required": [
        "anotherParameter",
        "interfaceParam",
        "type"
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "definitions": {
        "Partial<interface-vices_compiler.ts-250-298-vices_compiler.ts-0-1248>": {
          "type": "object",
          "properties": {
            "test": {
              "type": "string"
            }
          }
        }
      },
      "title": "SecondOtherService"
    },
    "WebdaDemo/SimpleService": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "Type of the service"
        }
      },
      "required": [
        "type"
      ],
      "description": "Interface to specify the Service parameters",
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ThirdOtherService"
    },
    "WebdaDemo/ThirdOtherService": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "Type of the service"
        }
      },
      "required": [
        "type"
      ],
      "description": "Interface to specify the Service parameters",
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ThirdOtherService"
    },
    "WebdaDemo/BeanService": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "Type of the service"
        }
      },
      "required": [
        "type"
      ],
      "description": "Interface to specify the Service parameters",
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ThirdOtherService"
    },
    "WebdaDemo/CustomService": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "Type of the service"
        },
        "introspection": {
          "$ref": "#/definitions/Partial%3Cclass-interfaces.d.ts-0-349-interfaces.d.ts-0-390976353190%3E"
        }
      },
      "required": [
        "introspection",
        "type"
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "definitions": {
        "Partial<class-interfaces.d.ts-0-349-interfaces.d.ts-0-390976353190>": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "description": "Type of the service"
            }
          }
        }
      },
      "title": "CustomService"
    },
    "WebdaDemo/SampleAppGoodBean": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "Type of the service"
        }
      },
      "required": [
        "type"
      ],
      "description": "Interface to specify the Service parameters",
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ThirdOtherService"
    },
    "WebdaDemo/CustomDeployer": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "CustomDeployer"
    }
  }
}