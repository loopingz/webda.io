"use strict";(self.webpackChunk_webda_docs=self.webpackChunk_webda_docs||[]).push([[25364],{78960:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>s,default:()=>p,frontMatter:()=>r,metadata:()=>c,toc:()=>d});var i=t(17624),o=t(4552);const r={},s="Invitation Service",c={id:"Modules/core/InvitationService",title:"Invitation Service",description:"The invitation service implement a workflow to invite users by their idents on an object.",source:"@site/pages/Modules/core/InvitationService.md",sourceDirName:"Modules/core",slug:"/Modules/core/InvitationService",permalink:"/docs/Modules/core/InvitationService",draft:!1,unlisted:!1,editUrl:"https://github.com/loopingz/webda.io/tree/docs/pages/Modules/core/InvitationService.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Google Auth",permalink:"/docs/Modules/core/Authentication/Google"},next:{title:"Mailer",permalink:"/docs/Modules/core/Mailer"}},a={},d=[];function l(e){const n={code:"code",h1:"h1",p:"p",...(0,o.M)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"invitation-service",children:"Invitation Service"}),"\n",(0,i.jsx)(n.p,{children:"The invitation service implement a workflow to invite users by their idents on an object."}),"\n",(0,i.jsxs)(n.p,{children:["The invitation can be pending if the user is not registered or if ",(0,i.jsx)(n.code,{children:"autoAccept"})," is false."]}),"\n",(0,i.jsx)(n.p,{children:"Example:"}),"\n",(0,i.jsx)(n.p,{children:"With a Company CoreModel"}),"\n",(0,i.jsxs)(n.p,{children:["You can invite a user by ident into the company.\nYou will find in ",(0,i.jsx)(n.code,{children:"attribute"})," the accepted invitations on both Company and User model\nYou will find in ",(0,i.jsx)(n.code,{children:"pendingAttribute"})," the pending invitations on both Company and User model."]}),"\n",(0,i.jsxs)(n.p,{children:["If ",(0,i.jsx)(n.code,{children:"multiple"})," is false, then on the User the ",(0,i.jsx)(n.code,{children:"attribute"})," is a single instance of ",(0,i.jsx)(n.code,{children:"Partial<Company>"})," otherwise it will be a map ",(0,i.jsx)(n.code,{children:"{[key: string}: Partial<Company>}"}),"\nThe ",(0,i.jsx)(n.code,{children:"pendingAttribute"})," is always a ",(0,i.jsx)(n.code,{children:"{[key: string}: Partial<Company>}"})," as you can be invited to several Company and pick and choose regardless if you can have several company or not.\nWhen ",(0,i.jsx)(n.code,{children:"multiple"})," is false any new accept will lead to replacement of the attribute.\nYou cannot define ",(0,i.jsx)(n.code,{children:"autoAccept"})," if multiple is false"]}),"\n",(0,i.jsx)(n.p,{children:"An invitation can be done with either ident or user."}),"\n",(0,i.jsx)(n.p,{children:"Pending invitations contains unaccepted invitation or invitation to a non-registered idents"})]})}function p(e={}){const{wrapper:n}={...(0,o.M)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},4552:(e,n,t)=>{t.d(n,{I:()=>c,M:()=>s});var i=t(11504);const o={},r=i.createContext(o);function s(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);