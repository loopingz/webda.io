{
  "beans": {},
  "deployers": {},
  "moddas": {
    "webda/mongostore": "lib/mongodb:default"
  },
  "models": {
    "graph": {},
    "tree": {},
    "list": {}
  },
  "schemas": {
    "webda/mongostore": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "Type of the service"
        },
        "url": {
          "type": "string",
          "description": "URL on which to serve the content"
        },
        "model": {
          "type": "string",
          "description": "Webda model to use within the Store",
          "default": "Webda/CoreModel"
        },
        "models": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Different models managed by this store"
        },
        "asyncDelete": {
          "type": "boolean",
          "description": "async delete"
        },
        "expose": {
          "$ref": "#/definitions/ExposeParameters",
          "description": "Expose the service to an urls"
        },
        "operationPrefix": {
          "type": "string",
          "description": "Register routes as operation with {operationPrefix}.{routeType}\n\nIf not defined it will be removed"
        },
        "strict": {
          "type": "boolean",
          "description": "Allow to load object that does not have the type data\n\nIf set to true, then the Store will only managed the defined _model and no model extending this one",
          "default": false
        },
        "defaultModel": {
          "type": "boolean",
          "description": "When __type model not found, use the model If strict is setup this parameter is not used",
          "default": true
        },
        "forceModel": {
          "type": "boolean",
          "description": "If set, Store will ignore the __type",
          "default": false
        },
        "slowQueryThreshold": {
          "type": "number",
          "description": "Slow query threshold",
          "default": 30000
        },
        "parent": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "condition": {
              "type": "string"
            }
          },
          "required": [
            "name",
            "condition"
          ],
          "description": "Parent of the store\n\nIf parent is specified the url route is relative to it"
        },
        "graphql": {
          "type": "boolean",
          "description": "For future use in our GraphQL api\n\nExpose this store in the graphql"
        },
        "mongoUrl": {
          "type": "string",
          "description": "Contains the URL to Mongo Server\n\nWill try to use WEBDA_MONDO_URL environment variable if not defined"
        },
        "options": {
          "description": "Additional options for Mongo connetion\n\nShould be typed with MongoClientOptions but not available due to bug in ts-json-schema-generator https://docs.mongodb.com/manual/reference/connection-string"
        },
        "collection": {
          "type": "string",
          "description": "Which collection to use"
        },
        "database": {
          "type": "string"
        },
        "databaseOptions": {
          "type": "object",
          "properties": {
            "writeConcern": {
              "anyOf": [
                {
                  "type": "object",
                  "properties": {
                    "w": {
                      "$ref": "#/definitions/W",
                      "description": "request acknowledgment that the write operation has propagated to a specified number of mongod instances or to mongod instances with specified tags."
                    },
                    "wtimeout": {
                      "type": "number",
                      "description": "specify a time limit to prevent write operations from blocking indefinitely"
                    },
                    "j": {
                      "type": "boolean",
                      "description": "request acknowledgment that the write operation has been written to the on-disk journal"
                    },
                    "fsync": {
                      "anyOf": [
                        {
                          "type": "boolean"
                        },
                        {
                          "type": "number",
                          "const": 1
                        }
                      ],
                      "description": "equivalent to the j option"
                    }
                  },
                  "description": "A MongoDB WriteConcern, which describes the level of acknowledgement requested from MongoDB for write operations."
                },
                {
                  "type": "object",
                  "properties": {
                    "w": {
                      "$ref": "#/definitions/W",
                      "description": "The write concern"
                    },
                    "wtimeoutMS": {
                      "type": "number",
                      "description": "The write concern timeout"
                    },
                    "journal": {
                      "type": "boolean",
                      "description": "The journal write concern"
                    },
                    "j": {
                      "type": "boolean",
                      "description": "The journal write concern"
                    },
                    "wtimeout": {
                      "type": "number",
                      "description": "The write concern timeout"
                    },
                    "fsync": {
                      "anyOf": [
                        {
                          "type": "boolean"
                        },
                        {
                          "type": "number",
                          "const": 1
                        }
                      ],
                      "description": "The file sync write concern"
                    }
                  }
                }
              ],
              "description": "Write Concern as an object"
            },
            "promoteLongs": {
              "type": "boolean",
              "description": "when deserializing a Long will fit it into a Number if it's smaller than 53 bits."
            },
            "promoteBuffers": {
              "type": "boolean",
              "description": "when deserializing a Binary will return it as a node.js Buffer instance."
            },
            "promoteValues": {
              "type": "boolean",
              "description": "when deserializing will promote BSON values to their Node.js closest equivalent types."
            },
            "fieldsAsRaw": {
              "type": "object",
              "description": "allow to specify if there what fields we wish to return as unserialized raw buffer."
            },
            "bsonRegExp": {
              "type": "boolean",
              "description": "return BSON regular expressions as BSONRegExp instances."
            },
            "raw": {
              "type": "boolean",
              "description": "Enabling the raw option will return a [Node.js Buffer](https://nodejs.org/api/buffer.html) which is allocated using [allocUnsafe API](https://nodejs.org/api/buffer.html#static-method-bufferallocunsafesize). See this section from the [Node.js Docs here](https://nodejs.org/api/buffer.html#what-makes-bufferallocunsafe-and-bufferallocunsafeslow-unsafe) for more detail about what \"unsafe\" refers to in this context. If you need to maintain your own editable clone of the bytes returned for an extended life time of the process, it is recommended you allocate your own buffer and clone the contents:"
            },
            "checkKeys": {
              "type": "boolean",
              "description": "the serializer will check if keys are valid."
            },
            "serializeFunctions": {
              "type": "boolean",
              "description": "serialize the javascript functions **(default:false)**."
            },
            "ignoreUndefined": {
              "type": "boolean",
              "description": "serialize will not emit undefined fields **(default:true)**"
            },
            "enableUtf8Validation": {
              "type": "boolean",
              "description": "Enable utf8 validation when deserializing BSON documents.  Defaults to true."
            },
            "authSource": {
              "type": "string",
              "description": "If the database authentication is dependent on another databaseName."
            },
            "forceServerObjectId": {
              "type": "boolean",
              "description": "Force server to assign _id values instead of driver."
            },
            "readPreference": {
              "$ref": "#/definitions/ReadPreferenceLike",
              "description": "The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST)."
            },
            "pkFactory": {
              "type": "object",
              "description": "A primary key factory object for generation of custom _id keys."
            },
            "readConcern": {
              "type": "object",
              "properties": {
                "level": {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/ReadConcernLevel"
                    },
                    {
                      "type": "string"
                    }
                  ]
                }
              },
              "required": [
                "level"
              ],
              "description": "Specify a read concern for the collection. (only MongoDB 3.2 or higher supported)"
            },
            "retryWrites": {
              "type": "boolean",
              "description": "Should retry failed writes"
            }
          },
          "description": "Mongo Database Options"
        },
        "openapi": {
          "type": "object",
          "additionalProperties": true
        }
      },
      "required": [
        "asyncDelete",
        "collection",
        "slowQueryThreshold",
        "type"
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "definitions": {
        "ExposeParameters": {
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "description": "URL endpoint to use to expose REST Resources API",
              "default": "service.getName().toLowerCase()"
            },
            "restrict": {
              "type": "object",
              "properties": {
                "create": {
                  "type": "boolean",
                  "description": "Do not expose the POST"
                },
                "update": {
                  "type": "boolean",
                  "description": "Do not expose the PUT and PATCH"
                },
                "get": {
                  "type": "boolean",
                  "description": "Do not expose the GET"
                },
                "delete": {
                  "type": "boolean",
                  "description": "Do not expose the DELETE"
                },
                "query": {
                  "type": "boolean",
                  "description": "Do not expose the query endpoint"
                }
              },
              "description": "You can restrict any part of the CRUD",
              "default": {}
            },
            "queryMethod": {
              "type": "string",
              "enum": [
                "PUT",
                "GET"
              ],
              "description": "For confidentiality sometimes you might prefer to expose query through PUT To avoid GET logging",
              "default": "GET"
            }
          }
        },
        "W": {
          "anyOf": [
            {
              "type": "number"
            },
            {
              "type": "string",
              "const": "majority"
            }
          ]
        },
        "ReadPreferenceLike": {
          "anyOf": [
            {
              "type": "object",
              "properties": {
                "mode": {
                  "$ref": "#/definitions/ReadPreferenceMode"
                },
                "tags": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/TagSet"
                  }
                },
                "hedge": {
                  "type": "object",
                  "properties": {
                    "enabled": {
                      "type": "boolean",
                      "description": "Explicitly enable or disable hedged reads."
                    }
                  }
                },
                "maxStalenessSeconds": {
                  "type": "number"
                },
                "minWireVersion": {
                  "type": "number"
                }
              },
              "required": [
                "mode"
              ],
              "description": "The **ReadPreference** class is a class that represents a MongoDB ReadPreference and is used to construct connections."
            },
            {
              "$ref": "#/definitions/ReadPreferenceMode"
            }
          ]
        },
        "ReadPreferenceMode": {
          "anyOf": [
            {
              "type": "string",
              "const": "primary"
            },
            {
              "type": "string",
              "const": "primaryPreferred"
            },
            {
              "type": "string",
              "const": "secondary"
            },
            {
              "type": "string",
              "const": "secondaryPreferred"
            },
            {
              "type": "string",
              "const": "nearest"
            },
            {}
          ]
        },
        "TagSet": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "ReadConcernLevel": {
          "anyOf": [
            {
              "type": "string",
              "const": "local"
            },
            {
              "type": "string",
              "const": "majority"
            },
            {
              "type": "string",
              "const": "linearizable"
            },
            {
              "type": "string",
              "const": "available"
            },
            {
              "type": "string",
              "const": "snapshot"
            },
            {}
          ]
        }
      },
      "title": "MongoStore"
    }
  }
}