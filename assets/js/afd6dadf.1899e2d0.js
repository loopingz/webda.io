"use strict";(self.webpackChunk_webda_docs=self.webpackChunk_webda_docs||[]).push([[15784],{78897:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>l,frontMatter:()=>s,metadata:()=>c,toc:()=>a});var o=n(17624),r=n(4552);const s={},i="Context",c={id:"Concepts/Context",title:"Context",description:"The Context is used to expose Session and globally all information aroudn the current operation.",source:"@site/pages/Concepts/Context.md",sourceDirName:"Concepts",slug:"/Concepts/Context",permalink:"/docs/Concepts/Context",draft:!1,unlisted:!1,editUrl:"https://github.com/loopingz/webda.io/tree/docs/pages/Concepts/Context.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"WebdaQL",permalink:"/docs/Concepts/Stores/WebdaQL"},next:{title:"Loggers",permalink:"/docs/Concepts/Logger"}},d={},a=[{value:"Extend Context",id:"extend-context",level:2}];function x(e){const t={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,r.M)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h1,{id:"context",children:"Context"}),"\n",(0,o.jsx)(t.p,{children:"The Context is used to expose Session and globally all information aroudn the current operation."}),"\n",(0,o.jsxs)(t.p,{children:["As we have the ability to execute outside of ",(0,o.jsx)(t.code,{children:"http"})," context the Context is not directly linked to the ",(0,o.jsx)(t.code,{children:"http"})," request."]}),"\n",(0,o.jsxs)(t.p,{children:["We have an ",(0,o.jsx)(t.code,{children:"OperationContext"}),". This is the main context that is used to execute an operation. It is created by the ",(0,o.jsx)(t.code,{children:"ContextProvider"})," and is used to execute the operation."]}),"\n",(0,o.jsx)(t.h2,{id:"extend-context",children:"Extend Context"}),"\n",(0,o.jsx)(t.p,{children:"You can extend it by adding your own ContextProvider:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-js",metastring:'title="src/myservice.ts"',children:'import { ContextProvider, Bean, Service, ContextProviderInfo, OperationContext } from "@webda/core";\n\n@Bean\nclass MyService extends Service implements ContextProvider {\n  /**\n   * @override\n   */\n  resolve(): this {\n    super.resolve();\n    this.log("INFO", "Registering ArizeContext");\n    this.getWebda().registerContextProvider(this);\n  }\n  /**\n   * Return a custom Context\n   * @param info\n   * @returns\n   */\n  getContext(info: ContextProviderInfo): OperationContext<any, any> {\n    return new MyContext(this.getWebda(), info.http, info.stream);\n  }\n}\n'})})]})}function l(e={}){const{wrapper:t}={...(0,r.M)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(x,{...e})}):x(e)}},4552:(e,t,n)=>{n.d(t,{I:()=>c,M:()=>i});var o=n(11504);const r={},s=o.createContext(r);function i(e){const t=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),o.createElement(s.Provider,{value:t},e.children)}}}]);