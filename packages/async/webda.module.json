{
  "beans": {},
  "deployers": {},
  "moddas": {
    "webda/asyncjobservice": "lib/services/asyncjobservice:default",
    "webda/localrunner": "lib/services/localrunner:default",
    "webda/servicerunner": "lib/services/servicerunner:default"
  },
  "models": {
    "graph": {
      "webda/asyncaction": {},
      "webda/asyncwebdaaction": {},
      "webda/asyncoperationaction": {}
    },
    "tree": {
      "webda/asyncaction": {
        "webda/asyncwebdaaction": {},
        "webda/asyncoperationaction": {}
      }
    },
    "list": {
      "webda/asyncaction": "lib/models:default",
      "webda/asyncoperationaction": "lib/models:AsyncOperationAction",
      "webda/asyncwebdaaction": "lib/models:AsyncWebdaAction"
    }
  },
  "schemas": {
    "webda/asyncaction": {
      "type": "object",
      "properties": {
        "_creationDate": {
          "type": "string",
          "format": "date-time",
          "description": "Creation date",
          "readOnly": true
        },
        "_lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Last update date",
          "readOnly": true
        },
        "uuid": {
          "type": "string",
          "description": "Action uuid"
        },
        "status": {
          "type": "string",
          "enum": [
            "RUNNING",
            "SUCCESS",
            "ERROR",
            "QUEUED",
            "STARTING",
            "TIMEOUT",
            "SCHEDULED"
          ],
          "description": "Current status"
        },
        "scheduled": {
          "type": "number",
          "description": "Timestamp when the action was scheduled"
        },
        "errorMessage": {
          "type": "string",
          "description": "If an error occured it should contain the message"
        },
        "job": {
          "type": "object",
          "description": "Job information"
        },
        "_lastJobUpdate": {
          "type": "number",
          "description": "Last time the job was updated",
          "readOnly": true
        },
        "results": {
          "description": "Results from the job"
        },
        "statusDetails": {
          "description": "Job current status"
        },
        "type": {
          "type": "string"
        },
        "arguments": {
          "type": "array",
          "items": {}
        },
        "logs": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Current logs"
        },
        "action": {
          "type": "string",
          "description": "Expected action for the job\n\nIt should be a verb"
        }
      },
      "required": [
        "uuid",
        "status",
        "job",
        "results",
        "statusDetails",
        "type",
        "logs"
      ],
      "description": "Define here a model that can be used along with Store service",
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AsyncAction"
    },
    "webda/asyncjobservice": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "Type of the service"
        },
        "url": {
          "type": "string",
          "description": "URL to expose job status report hook",
          "default": "/async/jobs"
        },
        "store": {
          "type": "string",
          "description": "Store name to use for async actions",
          "default": "AsyncActions"
        },
        "binaryStore": {
          "type": "string",
          "description": "If we want to expose a way to upload/download binary for the job\n\nIt will expose a /download and /upload additional url"
        },
        "localLaunch": {
          "type": "boolean",
          "description": "If set runner will be called without queue",
          "default": false
        },
        "queue": {
          "type": "string",
          "description": "Queue to post execution to",
          "default": "AsyncActionsQueue"
        },
        "fallbackOnFirst": {
          "type": "boolean",
          "description": "Fallback on first runner if none match",
          "default": false
        },
        "runners": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Runners to use"
        },
        "concurrencyLimit": {
          "type": "number",
          "description": "Limit the maximum number of jobs running in //"
        },
        "onlyHttpHook": {
          "type": "boolean",
          "description": "Define if we should only use an http hook and not rely on store for AsyncOperation",
          "default": false
        },
        "includeCron": {
          "type": "boolean",
          "description": "Include Cron annotation to launch them as AsyncOperationAction",
          "default": true
        },
        "schedulerResolution": {
          "type": "number",
          "description": "Schedule action resolution\n\nIf set to 1000ms, you can schedule action per second by default it resolve per minute",
          "default": 60000
        },
        "logsLimit": {
          "type": "number",
          "description": "Limit the number of lines of logs available for an async action\n\nIf you need to store large amount of logs then you should use the CloudWatchLogger or similar logger",
          "default": 500
        },
        "asyncActionModel": {
          "type": "string",
          "description": "Model to use when launching async action",
          "default": "Webda/AsyncWebdaAction"
        },
        "asyncOperationModel": {
          "type": "string",
          "description": "Model to use when launching async operation",
          "default": "Webda/AsyncOperationAction"
        },
        "asyncOperationDefinition": {
          "type": "string",
          "description": "JSON file of the AsyncOperation definition\n\nGenerated with `webda operations operations.json`"
        },
        "openapi": {
          "type": "object",
          "additionalProperties": true
        }
      },
      "required": [
        "fallbackOnFirst",
        "logsLimit",
        "queue",
        "runners",
        "store",
        "type",
        "url"
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AsyncJobService"
    },
    "webda/asyncoperationaction": {
      "type": "object",
      "properties": {
        "_creationDate": {
          "type": "string",
          "format": "date-time",
          "description": "Creation date",
          "readOnly": true
        },
        "_lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Last update date",
          "readOnly": true
        },
        "uuid": {
          "type": "string",
          "description": "Action uuid"
        },
        "status": {
          "type": "string",
          "enum": [
            "RUNNING",
            "SUCCESS",
            "ERROR",
            "QUEUED",
            "STARTING",
            "TIMEOUT",
            "SCHEDULED"
          ],
          "description": "Current status"
        },
        "scheduled": {
          "type": "number",
          "description": "Timestamp when the action was scheduled"
        },
        "errorMessage": {
          "type": "string",
          "description": "If an error occured it should contain the message"
        },
        "job": {
          "type": "object",
          "description": "Job information"
        },
        "_lastJobUpdate": {
          "type": "number",
          "description": "Last time the job was updated",
          "readOnly": true
        },
        "results": {
          "description": "Results from the job"
        },
        "statusDetails": {
          "description": "Job current status"
        },
        "type": {
          "type": "string"
        },
        "arguments": {
          "type": "array",
          "items": {}
        },
        "logs": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Current logs"
        },
        "action": {
          "type": "string",
          "description": "Expected action for the job\n\nIt should be a verb"
        },
        "operationId": {
          "type": "string"
        },
        "context": {
          "type": "object",
          "properties": {
            "_promises": {
              "type": "array",
              "items": {},
              "description": "Contain all registered promises to this context",
              "readOnly": true
            },
            "_stream": {
              "type": "object",
              "properties": {
                "writable": {
                  "type": "boolean"
                },
                "writableEnded": {
                  "type": "boolean"
                },
                "writableFinished": {
                  "type": "boolean"
                },
                "writableHighWaterMark": {
                  "type": "number"
                },
                "writableLength": {
                  "type": "number"
                },
                "writableObjectMode": {
                  "type": "boolean"
                },
                "writableCorked": {
                  "type": "number"
                },
                "destroyed": {
                  "type": "boolean"
                }
              },
              "required": [
                "destroyed",
                "writable",
                "writableCorked",
                "writableEnded",
                "writableFinished",
                "writableHighWaterMark",
                "writableLength",
                "writableObjectMode"
              ],
              "description": "Output stream",
              "readOnly": true
            }
          },
          "description": "OperationContext is used when call to an operation"
        },
        "logLevel": {
          "$ref": "#/definitions/WorkerLogLevel"
        }
      },
      "required": [
        "context",
        "job",
        "logLevel",
        "logs",
        "operationId",
        "results",
        "status",
        "statusDetails",
        "type",
        "uuid"
      ],
      "description": "Operation called asynchronously",
      "$schema": "http://json-schema.org/draft-07/schema#",
      "definitions": {
        "WorkerLogLevel": {
          "type": "string",
          "enum": [
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "TRACE"
          ],
          "description": "LogLevel as intersection to compare with integer values"
        }
      },
      "title": "AsyncOperationAction"
    },
    "webda/asyncwebdaaction": {
      "type": "object",
      "properties": {
        "_creationDate": {
          "type": "string",
          "format": "date-time",
          "description": "Creation date",
          "readOnly": true
        },
        "_lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Last update date",
          "readOnly": true
        },
        "uuid": {
          "type": "string",
          "description": "Action uuid"
        },
        "status": {
          "type": "string",
          "enum": [
            "RUNNING",
            "SUCCESS",
            "ERROR",
            "QUEUED",
            "STARTING",
            "TIMEOUT",
            "SCHEDULED"
          ],
          "description": "Current status"
        },
        "scheduled": {
          "type": "number",
          "description": "Timestamp when the action was scheduled"
        },
        "errorMessage": {
          "type": "string",
          "description": "If an error occured it should contain the message"
        },
        "job": {
          "type": "object",
          "description": "Job information"
        },
        "_lastJobUpdate": {
          "type": "number",
          "description": "Last time the job was updated",
          "readOnly": true
        },
        "results": {
          "description": "Results from the job"
        },
        "statusDetails": {
          "description": "Job current status"
        },
        "type": {
          "type": "string"
        },
        "arguments": {
          "type": "array",
          "items": {}
        },
        "logs": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Current logs"
        },
        "action": {
          "type": "string",
          "description": "Expected action for the job\n\nIt should be a verb"
        },
        "logLevel": {
          "$ref": "#/definitions/WorkerLogLevel"
        },
        "serviceName": {
          "type": "string",
          "description": "service to call"
        },
        "method": {
          "type": "string",
          "description": "method to call"
        }
      },
      "required": [
        "job",
        "logLevel",
        "logs",
        "results",
        "status",
        "statusDetails",
        "type",
        "uuid"
      ],
      "description": "Define a Webda Async Action",
      "$schema": "http://json-schema.org/draft-07/schema#",
      "definitions": {
        "WorkerLogLevel": {
          "type": "string",
          "enum": [
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "TRACE"
          ],
          "description": "LogLevel as intersection to compare with integer values"
        }
      },
      "title": "AsyncWebdaAction"
    },
    "webda/localrunner": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "Type of the service"
        },
        "url": {
          "type": "string",
          "description": "URL on which to serve the content"
        },
        "actions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Actions managed by the runner",
          "default": []
        },
        "command": {
          "type": "string",
          "description": "Command to launch"
        },
        "args": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Args"
        },
        "options": {
          "type": "object",
          "properties": {
            "serialization": {
              "$ref": "#/definitions/SerializationType",
              "description": "Specify the kind of serialization used for sending messages between processes.",
              "default": "json"
            },
            "uid": {
              "type": "number"
            },
            "gid": {
              "type": "number"
            },
            "cwd": {
              "type": "string"
            },
            "env": {
              "type": "object",
              "properties": {}
            },
            "windowsHide": {
              "type": "boolean",
              "default": true
            },
            "timeout": {
              "type": "number",
              "default": 0
            },
            "argv0": {
              "type": "string"
            },
            "stdio": {
              "$ref": "#/definitions/StdioOptions"
            },
            "shell": {
              "type": [
                "boolean",
                "string"
              ]
            },
            "windowsVerbatimArguments": {
              "type": "boolean"
            },
            "detached": {
              "type": "boolean"
            }
          },
          "description": "Options\n\nBased on https://nodejs.org/api/child_process.html#child_process_child_process_spawn_command_args_options"
        },
        "autoStatus": {
          "type": "boolean",
          "description": "Use the observability of ChildProcess to update status accordingly"
        },
        "openapi": {
          "type": "object",
          "additionalProperties": true
        }
      },
      "required": [
        "command",
        "type"
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "definitions": {
        "SerializationType": {
          "type": "string",
          "enum": [
            "json",
            "advanced"
          ]
        },
        "StdioOptions": {
          "anyOf": [
            {
              "type": "string",
              "const": "pipe"
            },
            {
              "type": "string",
              "const": "ignore"
            },
            {
              "type": "string",
              "const": "inherit"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "type": "string",
                    "const": "pipe"
                  },
                  {
                    "type": "string",
                    "const": "ipc"
                  },
                  {
                    "type": "string",
                    "const": "ignore"
                  },
                  {
                    "type": "string",
                    "const": "inherit"
                  },
                  {
                    "type": "object",
                    "properties": {}
                  },
                  {
                    "type": "number"
                  },
                  {
                    "type": "null"
                  },
                  {
                    "not": {}
                  }
                ]
              }
            }
          ]
        }
      },
      "title": "LocalRunner"
    },
    "webda/servicerunner": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "Type of the service"
        },
        "url": {
          "type": "string",
          "description": "URL on which to serve the content"
        },
        "actions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Actions managed by the runner",
          "default": []
        },
        "logFormat": {
          "type": "string",
          "description": "Define the log format",
          "default": "ConsoleLoggerDefaultFormat"
        },
        "logSaveDelay": {
          "type": "number",
          "description": "How long before saving logs (in ms)",
          "default": 5000
        },
        "openapi": {
          "type": "object",
          "additionalProperties": true
        }
      },
      "required": [
        "type"
      ],
      "description": "Add the log format to capture",
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ServiceRunner"
    }
  }
}